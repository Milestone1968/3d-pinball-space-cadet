//
// Created by neo on 2019-08-15.
//

#ifndef PINBALL_PINBALL_H
#define PINBALL_PINBALL_H

/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'pinball'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct _GUID;
struct _devicemodeA;
struct tagLOGPALETTE;
struct tagWNDCLASSA;
struct HWND__;
struct HINSTANCE__;
struct HICON__;
struct HBRUSH__;
struct HDC__;
struct tagMSG;
struct tagINITCOMMONCONTROLSEX;
union _LARGE_INTEGER;
struct _EXCEPTION_RECORD;
struct _CONTEXT;
struct tWAVEFORMATEX;
struct HTASK__;
struct HMMIO__;

/* 1 */
typedef _GUID GUID;

/* 2 */
struct _GUID
{
    unsigned int Data1;
    unsigned __int16 Data2;
    unsigned __int16 Data3;
    unsigned __int8 Data4[8];
};

/* 3 */
struct _SCOPETABLE_ENTRY
{
    int EnclosingLevel;
    void *FilterFunc;
    void *HandlerFunc;
};

/* 4 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 64 */
typedef void *PVOID;

/* 15 */
typedef unsigned int DWORD;

/* 5 */
struct _EH3_EXCEPTION_REGISTRATION
{
    struct _EH3_EXCEPTION_REGISTRATION *Next;
    PVOID ExceptionHandler;
    PSCOPETABLE_ENTRY ScopeTable;
    DWORD TryLevel;
};

/* 6 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 7 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 8 */
struct CPPEH_RECORD
{
    DWORD old_esp;
    EXCEPTION_POINTERS *exc_ptr;
    struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 10 */
typedef int LONG;

/* 9 */
struct tagRECT
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
};

/* 11 */
typedef _devicemodeA DEVMODEA;

/* 13 */
typedef unsigned __int8 BYTE;

/* 14 */
typedef unsigned __int16 WORD;

/* 17 */
struct _devicemodeA::$1DE029518E5B112A14BB6E76DECCA4C4::$5ACE225D4D14CE0550A9F5A217E306C5
{
    __int16 dmOrientation;
    __int16 dmPaperSize;
    __int16 dmPaperLength;
    __int16 dmPaperWidth;
};

/* 19 */
struct _POINTL
{
    LONG x;
    LONG y;
};

/* 18 */
typedef _POINTL POINTL;

/* 16 */
union _devicemodeA::$1DE029518E5B112A14BB6E76DECCA4C4
{
    struct
    {
        __int16 dmOrientation;
        __int16 dmPaperSize;
        __int16 dmPaperLength;
        __int16 dmPaperWidth;
    };
    POINTL dmPosition;
};

/* 12 */
struct _devicemodeA
{
    BYTE dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union
    {
        struct
        {
            __int16 dmOrientation;
            __int16 dmPaperSize;
            __int16 dmPaperLength;
            __int16 dmPaperWidth;
        };
        POINTL dmPosition;
    };
    __int16 dmScale;
    __int16 dmCopies;
    __int16 dmDefaultSource;
    __int16 dmPrintQuality;
    __int16 dmColor;
    __int16 dmDuplex;
    __int16 dmYResolution;
    __int16 dmTTOption;
    __int16 dmCollate;
    BYTE dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    DWORD dmDisplayFlags;
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
};

/* 20 */
typedef tagRECT RECT;

/* 21 */
struct tagPALETTEENTRY
{
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
};

/* 22 */
typedef tagLOGPALETTE LOGPALETTE;

/* 24 */
typedef tagPALETTEENTRY PALETTEENTRY;

/* 23 */
struct tagLOGPALETTE
{
    WORD palVersion;
    WORD palNumEntries;
    PALETTEENTRY palPalEntry[1];
};

/* 26 */
typedef char CHAR;

/* 25 */
struct _OFSTRUCT
{
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
};

/* 27 */
typedef tagWNDCLASSA WNDCLASSA;

/* 29 */
typedef unsigned int UINT;

/* 35 */
typedef LONG LRESULT;

/* 31 */
typedef HWND__ *HWND;

/* 33 */
typedef UINT WPARAM;

/* 34 */
typedef LONG LPARAM;

/* 30 */
typedef LRESULT (__stdcall *WNDPROC)(HWND, UINT, WPARAM, LPARAM);

/* 36 */
typedef HINSTANCE__ *HINSTANCE;

/* 38 */
typedef HICON__ *HICON;

/* 40 */
typedef HICON HCURSOR;

/* 41 */
typedef HBRUSH__ *HBRUSH;

/* 43 */
typedef const CHAR *LPCSTR;

/* 28 */
struct tagWNDCLASSA
{
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
};

/* 32 */
struct HWND__
{
    int unused;
};

/* 37 */
struct HINSTANCE__
{
    int unused;
};

/* 39 */
struct HICON__
{
    int unused;
};

/* 42 */
struct HBRUSH__
{
    int unused;
};

/* 45 */
typedef HDC__ *HDC;

/* 47 */
typedef int BOOL;

/* 44 */
struct tagPAINTSTRUCT
{
    HDC hdc;
    BOOL fErase;
    RECT rcPaint;
    BOOL fRestore;
    BOOL fIncUpdate;
    BYTE rgbReserved[32];
};

/* 46 */
struct HDC__
{
    int unused;
};

/* 48 */
typedef tagPAINTSTRUCT PAINTSTRUCT;

/* 49 */
typedef tagMSG MSG;

/* 52 */
struct tagPOINT
{
    LONG x;
    LONG y;
};

/* 51 */
typedef tagPOINT POINT;

/* 50 */
struct tagMSG
{
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;
};

/* 53 */
typedef tagINITCOMMONCONTROLSEX INITCOMMONCONTROLSEX;

/* 54 */
#pragma pack(push, 1)
struct tagINITCOMMONCONTROLSEX
{
    DWORD dwSize;
    DWORD dwICC;
};
#pragma pack(pop)

/* 55 */
struct _FILETIME
{
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
};

/* 56 */
typedef _LARGE_INTEGER LARGE_INTEGER;

/* 58 */
struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E
{
    DWORD LowPart;
    LONG HighPart;
};

/* 59 */
typedef __int64 LONGLONG;

/* 57 */
union _LARGE_INTEGER
{
    struct
    {
        DWORD LowPart;
        LONG HighPart;
    };
    _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E u;
    LONGLONG QuadPart;
};

/* 62 */
typedef _EXCEPTION_RECORD EXCEPTION_RECORD;

/* 61 */
typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

/* 67 */
typedef _CONTEXT CONTEXT;

/* 66 */
typedef CONTEXT *PCONTEXT;

/* 60 */
struct _EXCEPTION_POINTERS
{
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
};

/* 65 */
typedef unsigned int UINT_PTR;

/* 63 */
struct _EXCEPTION_RECORD
{
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    UINT_PTR ExceptionInformation[15];
};

/* 70 */
struct _FLOATING_SAVE_AREA
{
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Cr0NpxState;
};

/* 69 */
typedef _FLOATING_SAVE_AREA FLOATING_SAVE_AREA;

/* 68 */
struct _CONTEXT
{
    DWORD ContextFlags;
    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;
    FLOATING_SAVE_AREA FloatSave;
    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;
    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;
    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;
    BYTE ExtendedRegisters[512];
};

/* 72 */
typedef UINT MMVERSION;

/* 71 */
#pragma pack(push, 1)
struct tagWAVEOUTCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
};
#pragma pack(pop)

/* 75 */
#pragma pack(push, 1)
struct mmtime_tag::$532DCF0E9B9A2B0A020BD11490F25514::$2498AB4F57B5A5935D3AAA9956C218FB
{
    BYTE hour;
    BYTE min;
    BYTE sec;
    BYTE frame;
    BYTE fps;
    BYTE dummy;
    BYTE pad[2];
};
#pragma pack(pop)

/* 76 */
#pragma pack(push, 1)
struct mmtime_tag::$532DCF0E9B9A2B0A020BD11490F25514::$B7A2B1CE967584EBB3840978181CF21D
{
    DWORD songptrpos;
};
#pragma pack(pop)

/* 74 */
#pragma pack(push, 1)
union mmtime_tag::$532DCF0E9B9A2B0A020BD11490F25514
{
    DWORD ms;
    DWORD sample;
    DWORD cb;
    DWORD ticks;
    mmtime_tag::$532DCF0E9B9A2B0A020BD11490F25514::$2498AB4F57B5A5935D3AAA9956C218FB smpte;
    mmtime_tag::$532DCF0E9B9A2B0A020BD11490F25514::$B7A2B1CE967584EBB3840978181CF21D midi;
};
#pragma pack(pop)

/* 73 */
#pragma pack(push, 1)
struct mmtime_tag
{
    UINT wType;
    mmtime_tag::$532DCF0E9B9A2B0A020BD11490F25514 u;
};
#pragma pack(pop)

/* 77 */
typedef tWAVEFORMATEX WAVEFORMATEX;

/* 78 */
#pragma pack(push, 1)
struct tWAVEFORMATEX
{
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wBitsPerSample;
    WORD cbSize;
};
#pragma pack(pop)

/* 80 */
typedef DWORD FOURCC;

/* 83 */
typedef CHAR *LPSTR;

/* 82 */
typedef LRESULT __stdcall MMIOPROC(LPSTR lpmmioinfo, UINT uMsg, LPARAM lParam1, LPARAM lParam2);

/* 81 */
typedef MMIOPROC *LPMMIOPROC;

/* 84 */
typedef HTASK__ *HTASK;

/* 86 */
typedef char *HPSTR;

/* 87 */
typedef HMMIO__ *HMMIO;

/* 79 */
#pragma pack(push, 1)
struct _MMIOINFO
{
    DWORD dwFlags;
    FOURCC fccIOProc;
    LPMMIOPROC pIOProc;
    UINT wErrorRet;
    HTASK htask;
    LONG cchBuffer;
    HPSTR pchBuffer;
    HPSTR pchNext;
    HPSTR pchEndRead;
    HPSTR pchEndWrite;
    LONG lBufOffset;
    LONG lDiskOffset;
    DWORD adwInfo[3];
    DWORD dwReserved1;
    DWORD dwReserved2;
    HMMIO hmmio;
};
#pragma pack(pop)

/* 85 */
struct HTASK__
{
    int unused;
};

/* 88 */
#pragma pack(push, 1)
struct HMMIO__
{
    int unused;
};
#pragma pack(pop)

/* 89 */
#pragma pack(push, 1)
struct _MMCKINFO
{
    FOURCC ckid;
    DWORD cksize;
    FOURCC fccType;
    DWORD dwDataOffset;
    DWORD dwFlags;
};
#pragma pack(pop)

/* 91 */
typedef BYTE *LPBYTE;

/* 92 */
typedef void *HANDLE;

/* 90 */
struct _STARTUPINFOA
{
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
};

/* 93 */
struct TLightGroup;

/* 94 */
struct TLightBargraph;

/* 95 */
struct TBall;

/* 96 */
struct TEdgeManager;

/* 97 */
struct TTextBoxMessage;

/* 98 */
struct TEdgeSegment;

/* 99 */
struct TCircle;

/* 100 */
struct TPinballComponent;

/* 101 */
struct TCollisionComponent;

/* 102 */
struct TWall;

/* 103 */
struct TOneway;

/* 104 */
struct TBumper;

/* 105 */
struct TFlagSpinner;

/* 106 */
struct TPopupTarget;

/* 107 */
struct TSoloTarget;

/* 108 */
struct TRollover;

/* 109 */
struct TLightRollover;

/* 110 */
struct TKickback;

/* 111 */
struct TKickout;

/* 112 */
struct THole;

/* 113 */
struct TRamp;

/* 114 */
struct TSink;

/* 115 */
struct TDrain;

/* 116 */
struct TTableLayer;

/* 117 */
struct TPinballTable;

/* 118 */
struct TPlunger;

/* 119 */
struct TTextBox;

/* 120 */
struct TFlipperEdge;

/* 121 */
struct TFlipper;

/* 122 */
struct TLine;

/* 123 */
struct objlist_class;

/* 124 */
struct TLight;

/* 125 */
struct TEdgeBox;

/* 126 */
struct TZmapList;

/* 127 */
struct TComponentGroup;

/* 128 */
struct TDemo;

/* 129 */
struct TTimer;

/* 130 */
struct TBlocker;

/* 131 */
struct TTripwire;

/* 132 */
struct TSound;

/* 133 */
struct TGate;


//-------------------------------------------------------------------------
// Function declarations

#define __thiscall __cdecl // Test compile in C mode

// LSTATUS __stdcall RegOpenKeyA(HKEY hKey, LPCSTR lpSubKey, PHKEY phkResult);
// LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult);
// LSTATUS __stdcall RegCloseKey(HKEY hKey);
// LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
// LSTATUS __stdcall RegCreateKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition);
// LSTATUS __stdcall RegSetValueExA(HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData);
// LSTATUS __stdcall RegQueryValueA(HKEY hKey, LPCSTR lpSubKey, LPSTR lpData, PLONG lpcbData);
// BOOL __stdcall InitCommonControlsEx(const INITCOMMONCONTROLSEX *picce);
// UINT __stdcall RealizePalette(HDC hdc);
// HPALETTE __stdcall SelectPalette(HDC hdc, HPALETTE hPal, BOOL bForceBkgd);
// HDC __stdcall CreateCompatibleDC(HDC hdc);
// int __stdcall GetObjectA(HANDLE h, int c, LPVOID pv);
// HGDIOBJ __stdcall GetStockObject(int i);
// HBITMAP __stdcall CreateDIBitmap(HDC hdc, const BITMAPINFOHEADER *pbmih, DWORD flInit, const void *pjBits, const BITMAPINFO *pbmi, UINT iUsage);
// UINT __stdcall GetPaletteEntries(HPALETTE hpal, UINT iStart, UINT cEntries, LPPALETTEENTRY pPalEntries);
// BOOL __stdcall DeleteDC(HDC hdc);
// UINT __stdcall SetPaletteEntries(HPALETTE hpal, UINT iStart, UINT cEntries, const PALETTEENTRY *pPalEntries);
// BOOL __stdcall ResizePalette(HPALETTE hpal, UINT n);
// UINT __stdcall GetSystemPaletteEntries(HDC hdc, UINT iStart, UINT cEntries, LPPALETTEENTRY pPalEntries);
// UINT __stdcall SetSystemPaletteUse(HDC hdc, UINT use);
// int __stdcall GetDeviceCaps(HDC hdc, int index);
// HBITMAP __stdcall CreateCompatibleBitmap(HDC hdc, int cx, int cy);
// BOOL __stdcall BitBlt(HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop);
// HPALETTE __stdcall CreatePalette(const LOGPALETTE *plpal);
// HBRUSH __stdcall CreateSolidBrush(COLORREF color);
// HGDIOBJ __stdcall SelectObject(HDC hdc, HGDIOBJ h);
// BOOL __stdcall DeleteObject(HGDIOBJ ho);
// int __stdcall SetBkMode(HDC hdc, int mode);
// COLORREF __stdcall SetTextColor(HDC hdc, COLORREF color);
// DWORD __stdcall GetLayout(HDC hdc);
// int __stdcall StretchDIBits(HDC hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight, const void *lpBits, const BITMAPINFO *lpbmi, UINT iUsage, DWORD rop);
// DWORD __stdcall SetLayout(HDC hdc, DWORD l);
// BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT uExitCode);
// void __stdcall GetStartupInfoA(LPSTARTUPINFOA lpStartupInfo);
// UINT __stdcall GetPrivateProfileIntA(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault, LPCSTR lpFileName);
// BOOL __stdcall WritePrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString, LPCSTR lpFileName);
// DWORD __stdcall SizeofResource(HMODULE hModule, HRSRC hResInfo);
// DWORD __stdcall GetVersion();
// HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName);
// FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName);
// LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter);
// LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo);
// HANDLE __stdcall GetCurrentProcess();
// BOOL __stdcall FreeResource(HGLOBAL hResData);
// void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime);
// DWORD __stdcall GetCurrentProcessId();
// DWORD __stdcall GetCurrentThreadId();
// DWORD __stdcall GetTickCount();
// BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount);
// HFILE __stdcall _lopen(LPCSTR lpPathName, int iReadWrite);
// void __stdcall Sleep(DWORD dwMilliseconds);
// UINT __stdcall WinExec(LPCSTR lpCmdLine, UINT uCmdShow);
// HANDLE __stdcall GetCurrentThread();
// BOOL __stdcall SetThreadPriority(HANDLE hThread, int nPriority);
// DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize);
// DWORD __stdcall GetLastError();
// int __stdcall lstrcmpA(LPCSTR lpString1, LPCSTR lpString2);
// HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName);
// HRSRC __stdcall FindResourceA(HMODULE hModule, LPCSTR lpName, LPCSTR lpType);
// HGLOBAL __stdcall LoadResource(HMODULE hModule, HRSRC hResInfo);
// LPVOID __stdcall LockResource(HGLOBAL hResData);
// int __stdcall _hread(HFILE hFile, LPVOID lpBuffer, int lBytes);
// HGLOBAL __stdcall GlobalHandle(LPCVOID pMem);
// BOOL __stdcall GlobalUnlock(HGLOBAL hMem);
// HGLOBAL __stdcall GlobalReAlloc(HGLOBAL hMem, SIZE_T dwBytes, UINT uFlags);
// HGLOBAL __stdcall GlobalFree(HGLOBAL hMem);
// LONG __stdcall _llseek(HFILE hFile, LONG lOffset, int iOrigin);
// UINT __stdcall _lread(HFILE hFile, LPVOID lpBuffer, UINT uBytes);
// HGLOBAL __stdcall GlobalAlloc(UINT uFlags, SIZE_T dwBytes);
// LPVOID __stdcall GlobalLock(HGLOBAL hMem);
// HLOCAL __stdcall LocalAlloc(UINT uFlags, SIZE_T uBytes);
// HLOCAL __stdcall LocalFree(HLOCAL hMem);
// HFILE __stdcall OpenFile(LPCSTR lpFileName, LPOFSTRUCT lpReOpenBuff, UINT uStyle);
// HFILE __stdcall _lclose(HFILE hFile);
// LPSTR __stdcall lstrcpynA(LPSTR lpString1, LPCSTR lpString2, int iMaxLength);
// LPSTR __stdcall lstrcatA(LPSTR lpString1, LPCSTR lpString2);
// int __stdcall lstrlenA(LPCSTR lpString);
// LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2);
// INT __stdcall ShellAboutA(HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon);
// UINT __stdcall RegisterWindowMessageA(LPCSTR lpString);
// HWND __stdcall FindWindowA(LPCSTR lpClassName, LPCSTR lpWindowName);
// BOOL __stdcall GetCursorPos(LPPOINT lpPoint);
// BOOL __stdcall SetCursorPos(int X, int Y);
// BOOL __stdcall PeekMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);
// BOOL __stdcall TranslateMessage(const MSG *lpMsg);
// LRESULT __stdcall DispatchMessageA(const MSG *lpMsg);
// BOOL __stdcall GetMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
// BOOL __stdcall IsIconic(HWND hWnd);
// BOOL __stdcall SetForegroundWindow(HWND hWnd);
// HMENU __stdcall GetMenu(HWND hWnd);
// void __stdcall PostQuitMessage(int nExitCode);
// BOOL __stdcall PostMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
// BOOL __stdcall ReleaseCapture();
// HWND __stdcall SetCapture(HWND hWnd);
// HICON __stdcall LoadIconA(HINSTANCE hInstance, LPCSTR lpIconName);
// BOOL __stdcall EndPaint(HWND hWnd, const PAINTSTRUCT *lpPaint);
// BOOL __stdcall UnregisterClassA(LPCSTR lpClassName, HINSTANCE hInstance);
// HBITMAP __stdcall LoadBitmapA(HINSTANCE hInstance, LPCSTR lpBitmapName);
// BOOL __stdcall DestroyWindow(HWND hWnd);
// ATOM __stdcall RegisterClassA(const WNDCLASSA *lpWndClass);
// HWND __stdcall CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
// LONG __stdcall GetWindowLongA(HWND hWnd, int nIndex);
// LRESULT __stdcall DefWindowProcA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
// BOOL __stdcall UpdateWindow(HWND hWnd);
// HCURSOR __stdcall LoadCursorA(HINSTANCE hInstance, LPCSTR lpCursorName);
// HCURSOR __stdcall SetCursor(HCURSOR hCursor);
// BOOL __stdcall DeleteMenu(HMENU hMenu, UINT uPosition, UINT uFlags);
// BOOL __stdcall DrawMenuBar(HWND hWnd);
// LRESULT __stdcall SendDlgItemMessageA(HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam);
// UINT __stdcall MapVirtualKeyA(UINT uCode, UINT uMapType);
// int __stdcall GetKeyNameTextA(LONG lParam, LPSTR lpString, int cchSize);
// DWORD __stdcall CheckMenuItem(HMENU hMenu, UINT uIDCheckItem, UINT uCheck);
// BOOL __stdcall EnableMenuItem(HMENU hMenu, UINT uIDEnableItem, UINT uEnable);
// INT_PTR __stdcall DialogBoxParamA(HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
// int __stdcall MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);
// BOOL __stdcall EndDialog(HWND hDlg, INT_PTR nResult);
// UINT __stdcall GetDlgItemTextA(HWND hDlg, int nIDDlgItem, LPSTR lpString, int cchMax);
// BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow);
// BOOL __stdcall EnableWindow(HWND hWnd, BOOL bEnable);
// HWND __stdcall SetFocus(HWND hWnd);
// LRESULT __stdcall SendMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
// HWND __stdcall GetParent(HWND hWnd);
// BOOL __stdcall WinHelpA(HWND hWndMain, LPCSTR lpszHelp, UINT uCommand, ULONG_PTR dwData);
// HWND __stdcall GetDlgItem(HWND hDlg, int nIDDlgItem);
// BOOL __stdcall SetWindowTextA(HWND hWnd, LPCSTR lpString);
// LONG __stdcall SetWindowLongA(HWND hWnd, int nIndex, LONG dwNewLong);
// int __stdcall GetSystemMetrics(int nIndex);
// HDC __stdcall GetDC(HWND hWnd);
// HDC __stdcall BeginPaint(HWND hWnd, LPPAINTSTRUCT lpPaint);
// BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase);
// LONG __stdcall ChangeDisplaySettingsA(DEVMODEA *lpDevMode, DWORD dwFlags);
// BOOL __stdcall SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags);
// BOOL __stdcall RedrawWindow(HWND hWnd, const RECT *lprcUpdate, HRGN hrgnUpdate, UINT flags);
// BOOL __stdcall IsWindowVisible(HWND hWnd);
// BOOL __stdcall MoveWindow(HWND hWnd, int X, int Y, int nWidth, int nHeight, BOOL bRepaint);
// int __stdcall FillRect(HDC hDC, const RECT *lprc, HBRUSH hbr);
// INT_PTR __stdcall DialogBoxIndirectParamA(HINSTANCE hInstance, LPCDLGTEMPLATEA hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
// int __stdcall GetWindowTextA(HWND hWnd, LPSTR lpString, int nMaxCount);
// BOOL __stdcall MessageBeep(UINT uType);
// HWND __stdcall GetDesktopWindow();
// BOOL __stdcall GetWindowRect(HWND hWnd, LPRECT lpRect);
// int __stdcall DrawTextA(HDC hdc, LPCSTR lpchText, int cchText, LPRECT lprc, UINT format);
// int __stdcall ReleaseDC(HWND hWnd, HDC hDC);
// int __stdcall LoadStringA(HINSTANCE hInstance, UINT uID, LPSTR lpBuffer, int cchBufferMax);
// int _wsprintfA(LPSTR, LPCSTR, ...);
// BOOL __stdcall SetMenu(HWND hWnd, HMENU hMenu);
// DWORD __stdcall timeGetTime();
// BOOL __stdcall sndPlaySoundA(LPCSTR pszSound, UINT fuSound);
// HMMIO __stdcall mmioOpenA(LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen);
// MMRESULT __stdcall mmioClose(HMMIO hmmio, UINT fuClose);
// MMRESULT __stdcall mmioDescend(HMMIO hmmio, LPMMCKINFO pmmcki, const MMCKINFO *pmmckiParent, UINT fuDescend);
// LONG __stdcall mmioRead(HMMIO hmmio, HPSTR pch, LONG cch);
// MMRESULT __stdcall mmioAscend(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuAscend);
// MMRESULT __stdcall waveOutPause(HWAVEOUT hwo);
// MMRESULT __stdcall waveOutRestart(HWAVEOUT hwo);
// MMRESULT __stdcall waveOutWrite(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
// MMRESULT __stdcall waveOutOpen(LPHWAVEOUT phwo, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
// MMRESULT __stdcall waveOutClose(HWAVEOUT hwo);
// MMRESULT __stdcall waveOutPrepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
// MMRESULT __stdcall waveOutUnprepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
// MMRESULT __stdcall waveOutReset(HWAVEOUT hwo);
// MMRESULT __stdcall waveOutGetPosition(HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt);
// UINT __stdcall waveOutGetNumDevs();
// MMRESULT __stdcall waveOutGetDevCapsA(UINT_PTR uDeviceID, LPWAVEOUTCAPSA pwoc, UINT cbwoc);
// MCIERROR __stdcall mciSendCommandA(MCIDEVICEID mciId, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);
// void __cdecl __cexit();
// int __cdecl ___getmainargs(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __cdecl ___setusermatherr(_DWORD); weak
// void __cdecl __noreturn __exit(int Code);
// int ___p__fmode(void); weak
// int __cdecl ___set_app_type(_DWORD); weak
// int __cdecl _atoi(const char *Str);
// void __cdecl __c_exit();
// wchar_t *__cdecl _wcscpy(wchar_t *Dest, const wchar_t *Source);
// size_t __cdecl _wcslen(const wchar_t *Str);
// int __cdecl _isdigit(int C);
// int __cdecl _isalnum(int C);
// int __cdecl _isspace(int C);
// void *__cdecl _calloc(size_t NumOfElements, size_t SizeOfElements);
// int __cdecl _rand();
// double __cdecl _floor(double);
// char *__cdecl _strstr(const char *Str, const char *SubStr);
// void __cdecl __noreturn _exit(int Code);
// FILE *__cdecl _fopen(const char *Filename, const char *Mode);
// int __cdecl _fclose(FILE *File);
// int __cdecl __strnicmp(const char *Str1, const char *Str, size_t MaxCount);
// void *__cdecl _realloc(void *Memory, size_t NewSize);
// void __cdecl _free(void *Memory);
// void *__cdecl _malloc(size_t Size);
// int _sprintf(char *Dest, const char *Format, ...);
// char *__cdecl __itoa(int Val, char *DstBuf, int Radix);
// int _sscanf(const char *Src, const char *Format, ...);
// char *__cdecl __ltoa(int Val, char *DstBuf, int Radix);
// int ___p__commode(void); weak
// void *__cdecl _memmove(void *Dst, const void *Src, size_t Size);
// int __cdecl _atol(const char *Str);
HDC __stdcall _GetDC(HWND hWnd);
HDC __stdcall _BeginPaint(HWND hWnd, LPPAINTSTRUCT lpPaint);
CHAR *__stdcall options_path_init(LPCSTR lpString);
void __stdcall options_path_uninit();
LPCSTR __stdcall options_path(LPCSTR lpString2);
void __stdcall options_path_free();
HKEY __stdcall options_get_int(DWORD cbData, LPCSTR lpValueName, HKEY phkResult);
void __stdcall options_get_string(DWORD dwDisposition, LPCSTR lpValueName, LPSTR lpString1, LPCSTR lpString2, int iMaxLength);
void __stdcall options_set_int(HKEY phkResult, LPCSTR lpValueName, BYTE Data);
void __stdcall options_set_string(HKEY phkResult, LPCSTR lpValueName, LPCSTR lpString);
CHAR *__stdcall get_rc_string(__int16 a1, int a2);
int __stdcall get_rc_int(__int16 a1, int *a2);
int __stdcall grtext_draw_ttext_in_box(LPCSTR lpString, int mode, int, COLORREF color, int, int); // idb
int sub_10038F8();
LONG sub_1003975();
LONG sub_100399D();
BOOL __stdcall fullscrn_set_menu_mode(int a1);
signed int sub_1003A23();
int sub_1003B66();
LONG __stdcall fullscrn_set_screen_mode(int a1);
void __stdcall fullscrn_force_redraw();
signed int __stdcall fullscrn_displaychange();
BOOL __stdcall fullscrn_init(int a1, int a2, int a3, HWND a4, int a5, int a6);
LONG __stdcall fullscrn_shutdown();
BOOL __stdcall fullscrn_activate(int a1);
int __stdcall fullscrn_convert_mouse_pos(int a1);
_DWORD *__stdcall fullscrn_getminmaxinfo(_DWORD *a1);
// HBRUSH __userpurge sub_1003F10@<eax>(LONG a1@<ebx>, LONG a2@<edi>, int a3, int a4);
void __stdcall fullscrn_paint();
signed int __stdcall rectangle_clip(int *a1, int *a2, _DWORD *a3);
int __stdcall enclosing_box(_DWORD *a1, _DWORD *a2, _DWORD *a3);
int __stdcall DibSetUsage(int, HPALETTE hpal, int); // idb
_DWORD *__stdcall DibCreate(int a1, int a2, int a3);
int __stdcall gdrv_init(int a1, HWND a2);
int __stdcall gdrv_display_palette(int a1);
int __stdcall gdrv_uninit();
int __stdcall gdrv_create_bitmap_dib(int a1, int a2, int a3);
int __stdcall gdrv_create_bitmap(int a1, int a2, int a3);
signed int __stdcall gdrv_create_raw_bitmap(int a1, int a2, int a3, int a4);
signed int __stdcall gdrv_destroy_bitmap(int a1);
UINT __stdcall gdrv_start_blit_sequence();
int __stdcall gdrv_blit_sequence(int, int xSrc, int, int xDest, int yDest, int DestWidth, int DestHeight); // idb
int __stdcall gdrv_end_blit_sequence();
HDC __stdcall gdrv_blit(int a1, int xSrc, int a3, int xDest, int yDest, int DestWidth, int DestHeight);
int __stdcall gdrv_blat(int, int xDest, int yDest); // idb
// int __userpurge gdrv_fill_bitmap@<eax>(int a1@<ebx>, _DWORD *a2, unsigned int a3, int a4, int a5, int a6, char a7);
char *__stdcall gdrv_copy_bitmap(_DWORD *a1, int a2, int a3, int a4, int a5, _DWORD *a6, int a7, int a8);
_BYTE *__stdcall gdrv_copy_bitmap_w_transparency(_DWORD *a1, int a2, int a3, int a4, int a5, _DWORD *a6, int a7, int a8);
int __stdcall zdrv_pad(int a1);
signed int __stdcall zdrv_create_zmap(int a1, int a2, int a3);
signed int __stdcall zdrv_destroy_zmap(_DWORD *a1);
// int __userpurge zdrv_fill@<eax>(int a1@<ebx>, int a2, unsigned int a3, int a4, int a5, int a6, __int16 a7);
_WORD *__stdcall zdrv_paint(int a1, int a2, _DWORD *a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, int a10, int a11, int a12, int a13, int a14);
unsigned __int16 *__stdcall zdrv_paint_flat(int a1, int a2, _DWORD *a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, int a10, int a11, unsigned __int16 a12);
int __stdcall high_score_clear_table(int a1);
signed int __stdcall high_score_get_score_position(int a1, int a2);
int __stdcall high_score_place_new_score_into(int, int, LPCSTR lpString, int); // idb
char *__stdcall scramble_number_string(int Val, char *DstBuf);
signed int __stdcall high_score_read(int a1, int a2);
int __stdcall high_score_write(LPCSTR lpString, int); // idb
char *__stdcall score_string_format(int a1, char *a2);
void __stdcall hsdlg_show_score(HWND hDlg, LPCSTR lpString, int a3, int a4);
void __stdcall show_high_scores(HWND hDlg, LPCSTR lpString);
BOOL __stdcall HighScore(HWND, UINT, WPARAM, LPARAM); // idb
INT_PTR __stdcall show_high_score_dialog(const CHAR *a1);
INT_PTR __stdcall show_and_set_high_score_dialog(const CHAR *a1, int a2, int a3, const CHAR *a4);
int __stdcall memory_init(int a1);
int __stdcall memoryallocate(unsigned int a1);
void __stdcall memoryfree(int a1);
int __stdcall memoryrealloc(int a1, unsigned int a2);
void __stdcall options_uninit();
HMENU __stdcall options_menu_set(UINT uIDEnableItem, int a2);
HMENU __stdcall options_menu_check(UINT uIDCheckItem, int a2);
HMENU __stdcall options_toggle(UINT uIDCheckItem);
unsigned int __stdcall get_vk_key_name(__int16 a1, LPSTR lpString);
BOOL __stdcall KeyMapDlgProc(HWND, UINT, WPARAM, LPARAM); // idb
INT_PTR __stdcall options_keyboard();
void __stdcall options_init(HMENU a1);
int __stdcall partman_field(int a1, int a2, int a3);
int __stdcall partman_field_size_nth(int a1, int a2, int a3, int a4);
int __stdcall partman_field_size(int a1, int a2, int a3);
int __stdcall partman_field_nth(int a1, int a2, int a3, int a4);
int __stdcall partman_record_labeled(int, LPCSTR lpString); // idb
int __stdcall partman_field_labeled(int, LPCSTR lpString, int); // idb
void __stdcall partman_unload_records(_WORD *a1);
char __stdcall _lread_char(HFILE hFile);
int __stdcall _lread_long(HFILE hFile); // idb
signed __int16 *__stdcall partman_load_records(LPCSTR lpFileName);
int __stdcall FindShiftKeys();
int __stdcall nullsub_1(int, int, int); // weak
LRESULT __stdcall SoundCallBackWndProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
int __stdcall Sound_Init(HINSTANCE hInstance, int, int); // idb
HLOCAL __stdcall Sound_Close();
CHAR *__stdcall Sound_LoadWaveFile(LPCSTR lpName);
LPCVOID __stdcall Sound_FreeSound(LPCVOID pMem);
LPCVOID __stdcall Sound_Deactivate();
LPCVOID __stdcall Sound_Activate();
int __stdcall Sound_Idle();
signed int __stdcall Sound_Flush(signed int a1, int a2);
void __stdcall Sound_PlaySound(int a1, int a2, int a3, unsigned __int16 a4, __int16 a5);
void __stdcall Sound_Enable(signed int a1, int a2, int a3);
HPALETTE __stdcall splash_init_palette(LOGPALETTE *plpal);
HBITMAP __stdcall load_title_bitmap(HMODULE hModule, HDC hdc, LPCSTR lpName, UINT iStart, int a5, int a6);
int __stdcall splash_bitmap_setup(int a1);
void __stdcall splash_paint(int a1, HDC hdc);
void __stdcall splash_hide(int a1);
HINSTANCE __stdcall splash_destroy(int a1);
LRESULT __stdcall splash_message_handler(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
int __stdcall splash_screen(int, LPCSTR lpString2, LPCSTR); // idb
signed int __stdcall timer_init(int a1);
void __stdcall timer_uninit();
int __stdcall timer_set(float, int, int); // idb
signed int __stdcall timer_check();
int __stdcall timer_kill(int a1);
int __stdcall make_path_name(LPSTR lpFilename, LPCSTR lpString2, DWORD nSize); // idb
void __stdcall help_introduction(int a1, int a2);
BOOL __stdcall center_in(HWND hWnd, HWND a2);
INT __stdcall a_dialog(HINSTANCE hInstance, HWND hWnd, int a3);
// void __usercall winmain_pause(int a1@<ebx>);
// void __usercall winmain_end_pause(int a1@<ebx>);
// HCURSOR __usercall winmain_new_game@<eax>(int a1@<ebx>);
void __stdcall __noreturn winmain_memalloc_failure(); // idb
HANDLE __stdcall adjust_priority(int a1);
LRESULT __stdcall message_handler(HWND hWnd, UINT Msg, WPARAM wParam, int a4);
signed int sub_10082A9();
int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd);
double __stdcall normalize_2d(float *a1);
double __stdcall ray_intersect_circle(float *a1, float *a2);
int __stdcall line_init(int, float, float, float, float); // idb
double __stdcall ray_intersect_line(float *a1, float *a2);
float *__stdcall proj_matrix_vector_multiply(float *a1, float *a2, float *a3);
float *__stdcall cross(float *a1, float *a2, float *a3);
double __stdcall magnitude(float *a1);
int __stdcall proj_init(int a1, int a2, int a3, int a4);
int __stdcall proj_recenter(int a1, int a2);
double __stdcall proj_z_distance(_DWORD); // weak
double __stdcall proj_xform_to_2d(float *a1, _DWORD *a2);
signed int __stdcall loader_error(int a1, int a2);
_DWORD *__stdcall loader_default_vsi(_DWORD *a1);
signed int __stdcall loader_get_sound_id(int a1);
void __stdcall loader_unload();
int __stdcall loader_loadfrom(_WORD *a1);
int __stdcall loader_query_handle(LPCSTR lpString); // idb
signed int __stdcall loader_query_visual_states(int a1);
signed int __stdcall loader_material(int a1, _DWORD *a2);
signed int __stdcall loader_kicker(int a1, _DWORD *a2);
signed int __stdcall loader_state_id(int a1, signed int a2);
signed int __stdcall loader_query_visual(int a1, signed int a2, _DWORD *a3);
int __stdcall loader_query_name(int a1);
int __stdcall loader_query_float_attribute(int a1, signed int a2, int a3);
int __stdcall loader_query_iattribute(int a1, int a2, _DWORD *a3);
double __stdcall loader_play_sound(int a1);
objlist_class *__thiscall objlist_class::objlist_class(objlist_class *this, int a2, int a3);
void __thiscall objlist_class::Grow(objlist_class *__hidden this); // idb
void __stdcall flasher_callback(int, void *); // idb
void __stdcall flasher_start(struct flasher_type *, int); // idb
void __stdcall flasher_stop(struct flasher_type *, int); // idb
void __thiscall TLight::Reset(TLight *__hidden this); // idb
void __stdcall TLight::TimerExpired(int, void *); // idb
void __thiscall TLight::schedule_timeout(TLight *this, float); // idb
int __thiscall TLight::Message(TLight *this, int, float); // idb
TZmapList *__thiscall TLightGroup::~TLightGroup(TLightGroup *this);
void __thiscall TLightGroup::Reset(TLightGroup *__hidden this); // idb
void __stdcall TLightGroup::TimerExpired(int, void *); // idb
void __thiscall TLightGroup::reschedule_animation(TLightGroup *this, float); // idb
int __thiscall TLightGroup::next_light_up(TLightGroup *__hidden this); // idb
int __thiscall TLightGroup::next_light_down(TLightGroup *__hidden this); // idb
void __thiscall TLightGroup::start_animation(TLightGroup *__hidden this); // idb
void __stdcall TLightGroup::NotifyTimerExpired(int, void *); // idb
int __thiscall TLightGroup::Message(TLightGroup *this, int, float); // idb
TZmapList *__thiscall TLightBargraph::~TLightBargraph(TLightBargraph *this);
void __thiscall TLightBargraph::Reset(TLightBargraph *this); // idb
void __stdcall TLightBargraph::BargraphTimerExpired(int, void *); // idb
int __thiscall TLightBargraph::Message(TLightBargraph *this, int, float); // idb
void __thiscall objlist_class::Add(objlist_class *this, void *); // idb
TLight *__thiscall TLight::TLight(TLight *this, struct TPinballTable *a2, int a3);
TSound *__thiscall TSound::`vector deleting destructor'(TSound *this, char a2);
TLightGroup *__thiscall TLightGroup::TLightGroup(TLightGroup *this, struct TPinballTable *a2, int a3);
TLightGroup *__thiscall TLightGroup::`vector deleting destructor'(TLightGroup *this, char a2);
TLightBargraph *__thiscall TLightBargraph::TLightBargraph(TLightBargraph *this, struct TPinballTable *a2, int a3);
TLightBargraph *__thiscall TLightBargraph::`vector deleting destructor'(TLightBargraph *this, char a2);
int __stdcall midi_music_init(HWND a1);
MCIERROR __stdcall midi_music_shutdown();
MCIERROR __stdcall midi_music_stop();
MCIERROR __stdcall midi_play_pb_theme(int a1);
HWND __stdcall restart_midi_seq(int a1);
bool __thiscall TBall::already_hit(TBall *this, struct TEdgeSegment *a2);
TEdgeBox *__thiscall TEdgeBox::TEdgeBox(TEdgeBox *this);
signed __int64 __thiscall TEdgeManager::box_x(TEdgeManager *this, float a2);
signed __int64 __thiscall TEdgeManager::box_y(TEdgeManager *this, float a2);
int __thiscall TEdgeManager::increment_box_x(TEdgeManager *this, int); // idb
int __thiscall TEdgeManager::increment_box_y(TEdgeManager *this, int); // idb
void __stdcall `vector constructor iterator'(void *, unsigned int, int, void *(__thiscall *)(void *)); // idb
void __thiscall TEdgeBox::~TEdgeBox(TEdgeBox *this);
void __stdcall `vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *)); // idb
void __thiscall TEdgeManager::FieldEffects(TEdgeManager *this, struct TBall *, struct vector_type *); // idb
// int __userpurge TEdgeManager::TestGridBox@<eax>(TEdgeManager *this@<ecx>, double a2@<st0>, int a3, int a4, float *a5, struct TEdgeSegment **a6, struct ray_type *a7, struct TBall *a8, int a9);
double __thiscall TEdgeManager::FindCollisionDistance(TEdgeManager *this, struct ray_type *a2, struct TBall *a3, struct TEdgeSegment **a4);
TEdgeManager *__thiscall TEdgeManager::TEdgeManager(TEdgeManager *this, float a2, float a3, float a4, float a5);
TEdgeBox *__thiscall TEdgeBox::`vector deleting destructor'(TEdgeBox *this, char a2);
void __thiscall TEdgeManager::add_edge_to_box(TEdgeManager *this, int, int, struct TEdgeSegment *); // idb
void __thiscall TEdgeManager::add_field_to_box(TEdgeManager *this, int, int, struct field_effect_type *); // idb
TEdgeBox *__thiscall TEdgeManager::~TEdgeManager(TEdgeManager *this);
void __stdcall edges_insert_circle(struct circle_type *, struct TEdgeSegment *, struct field_effect_type *); // idb
void __stdcall edges_insert_square(float, float, float, float, struct TEdgeSegment *, struct field_effect_type *); // idb
struct TPinballComponent *__stdcall make_component_link(struct component_tag *); // idb
void __stdcall control_make_links(struct TPinballTable *); // idb
BOOL __stdcall light_on(struct component_tag *a1);
void __stdcall table_control_handler(int); // idb
// void __userpurge table_set_replay(int a1@<ebx>, float a2);
// void __usercall table_set_multiball(int a1@<ebx>);
// void __usercall table_set_jackpot(int a1@<ebx>);
// void __usercall table_set_bonus(int a1@<ebx>);
// void __usercall table_set_flag_lights(int a1@<ebx>);
// void __usercall table_set_bonus_hold(int a1@<ebx>);
// void __usercall table_bump_ball_sink_lock(int a1@<ebx>);
// void __userpurge table_add_extra_ball(int a1@<ebx>, float a2);
int __stdcall SpecialAddScore(int); // idb
void __stdcall AdvanceWormHoleDestination(int); // idb
void __stdcall FlipperRebounderControl1(int, struct TPinballComponent *); // idb
void __stdcall FlipperRebounderControl2(int, struct TPinballComponent *); // idb
void __stdcall RebounderControl(int, struct TPinballComponent *); // idb
void __stdcall BumperControl(int, struct TPinballComponent *); // idb
void __stdcall LeftKickerControl(int, struct TPinballComponent *); // idb
void __stdcall RightKickerControl(int, struct TPinballComponent *); // idb
void __stdcall LeftKickerGateControl(int, struct TPinballComponent *); // idb
void __stdcall RightKickerGateControl(int, struct TPinballComponent *); // idb
// void __userpurge DeploymentChuteToEscapeChuteOneWayControl(int a1@<ebx>, int a2@<esi>, int a3, struct TPinballComponent *a4);
void __stdcall DeploymentChuteToTableOneWayControl(int, struct TPinballComponent *); // idb
void __stdcall DrainBallBlockerControl(int, struct TPinballComponent *); // idb
// void __userpurge LaunchRampControl(int a1@<ebx>, int a2, struct TPinballComponent *a3);
void __stdcall LaunchRampHoleControl(int, struct TPinballComponent *); // idb
void __stdcall SpaceWarpRolloverControl(int, struct TPinballComponent *); // idb
// void __userpurge ReentryLanesRolloverControl(int a1@<ebx>, int a2@<edi>, int a3@<esi>, int a4, struct TPinballComponent *a5);
void __stdcall BumperGroupControl(int, struct TPinballComponent *); // idb
// void __userpurge LaunchLanesRolloverControl(int a1@<ebx>, int a2@<edi>, int a3@<esi>, int a4, struct TPinballComponent *a5);
// void __userpurge OutLaneRolloverControl(int a1@<ebx>, int a2@<esi>, int a3, struct TPinballComponent *a4);
void __stdcall ExtraBallLightControl(int, struct TPinballComponent *); // idb
// void __userpurge ReturnLaneRolloverControl(int a1@<esi>, int a2, struct TPinballComponent *a3);
// void __userpurge BonusLaneRolloverControl(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge FuelRollover1Control(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge FuelRollover2Control(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge FuelRollover3Control(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge FuelRollover4Control(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge FuelRollover5Control(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge FuelRollover6Control(int a1@<ebx>, int a2, struct TPinballComponent *a3);
void __stdcall HyperspaceLightGroupControl(int, struct TPinballComponent *); // idb
// void __userpurge WormHoleControl(int a1@<ebx>, int a2@<edi>, int a3@<esi>, int a4, struct TPinballComponent *a5);
void __stdcall LeftFlipperControl(int, struct TPinballComponent *); // idb
void __stdcall RightFlipperControl(int, struct TPinballComponent *); // idb
void __stdcall JackpotLightControl(int, struct TPinballComponent *); // idb
void __stdcall BonusLightControl(int, struct TPinballComponent *); // idb
void __stdcall BoosterTargetControl(int, struct TPinballComponent *); // idb
void __stdcall MedalLightGroupControl(int, struct TPinballComponent *); // idb
// void __userpurge MultiplierLightGroupControl(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge FuelSpotTargetControl(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge MissionSpotTargetControl(int a1@<esi>, int a2, struct TPinballComponent *a3);
void __stdcall LeftHazardSpotTargetControl(int, struct TPinballComponent *); // idb
void __stdcall RightHazardSpotTargetControl(int, struct TPinballComponent *); // idb
// void __userpurge WormHoleDestinationControl(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge BlackHoleKickoutControl(int a1@<ebx>, int a2, struct TPinballComponent *a3);
void __stdcall FlagControl(int, struct TPinballComponent *); // idb
// void __userpurge GravityWellKickoutControl(int a1@<ebx>, int a2, struct TPinballComponent *a3);
void __stdcall SkillShotGate1Control(int, struct TPinballComponent *); // idb
void __stdcall SkillShotGate2Control(int, struct TPinballComponent *); // idb
void __stdcall SkillShotGate3Control(int, struct TPinballComponent *); // idb
void __stdcall SkillShotGate4Control(int, struct TPinballComponent *); // idb
void __stdcall SkillShotGate5Control(int, struct TPinballComponent *); // idb
void __stdcall SkillShotGate6Control(int, struct TPinballComponent *); // idb
void __stdcall ShootAgainLightControl(int, struct TPinballComponent *); // idb
void __stdcall EscapeChuteSinkControl(int, struct TPinballComponent *); // idb
// int __usercall cheat_bump_rank@<eax>(int a1@<ebx>);
// void __userpurge pbctrl_bdoor_controller(int a1@<ebx>, int a2);
int __stdcall AddRankProgress(int); // idb
// void __userpurge WaitingDeploymentController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
void __stdcall SelectMissionController(int, struct TPinballComponent *); // idb
// void __userpurge PracticeMissionController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge LaunchTrainingController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge ReentryTrainingController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge ScienceMissionController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge StrayCometController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge SpaceRadiationController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge BlackHoleThreatController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge BugHuntController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge RescueMissionController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge AlienMenaceController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge AlienMenacePartTwoController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge SatelliteController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge ReconnaissanceController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge DoomsdayMachineController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge CosmicPlagueController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge CosmicPlaguePartTwoController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge SecretMissionYellowController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge SecretMissionRedController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge SecretMissionGreenController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge TimeWarpController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge TimeWarpPartTwoController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge MaelstromController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge MaelstromPartTwoController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge MaelstromPartThreeController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge MaelstromPartFourController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge MaelstromPartFiveController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge MaelstromPartSixController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge MaelstromPartSevenController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge MaelstromPartEightController(int a1@<ebx>, int a2, struct TPinballComponent *a3);
void __stdcall GameoverController(int, struct TPinballComponent *); // idb
void __stdcall UnselectMissionController(int, struct TPinballComponent *); // idb
void __stdcall MissionControl(int, struct TPinballComponent *); // idb
void __stdcall control_handler(int, struct TPinballComponent *); // idb
void __stdcall HyperspaceKickOutControl(int, struct TPinballComponent *); // idb
// void __userpurge PlungerControl(int a1@<ebx>, int a2, struct TPinballComponent *a3);
// void __userpurge MedalTargetControl(int a1@<ebx>, int a2@<edi>, int a3@<esi>, int a4, struct TPinballComponent *a5);
// void __userpurge MultiplierTargetControl(int a1@<ebx>, int a2@<edi>, int a3@<esi>, int a4, struct TPinballComponent *a5);
void __stdcall BallDrainControl(int, struct TPinballComponent *); // idb
int __stdcall objlist_add_object(_DWORD *a1, int a2);
signed int __stdcall objlist_delete_object(int a1, int a2);
_DWORD *__stdcall objlist_new(int a1);
int *__stdcall objlist_grow(int *a1, int a2);
void __stdcall build_occlude_list();
void __stdcall render_repaint(struct render_sprite_type_struct *); // idb
void __stdcall render_paint_balls(); // idb
void __stdcall render_unpaint_balls(); // idb
int __stdcall render_remove_sprite(struct render_sprite_type_struct *); // idb
int __stdcall render_remove_ball(struct render_sprite_type_struct *); // idb
BOOL __stdcall overlapping_box(struct rectangle_type *a1, struct rectangle_type *a2, struct rectangle_type *a3);
void __stdcall render_update();
void __stdcall render_uninit();
char *__stdcall render_init(_DWORD *a1, float a2, float a3, int a4, int a5);
int __stdcall render_sprite_modified(int a1);
int __stdcall render_create_sprite(int a1, int a2, int a3, int a4, int a5, _DWORD *a6);
int __stdcall render_set_background_zmap(struct zmap_header_type *a1, int a2, int a3);
int __stdcall render_sprite_set(_DWORD *a1, int a2, int a3, int a4, int a5);
void __stdcall render_sprite_set_bitmap(_DWORD *a1, int a2);
void __stdcall render_ball_set(int a1, int a2, float a3, int a4, int a5);
void __stdcall render_paint();
void __stdcall render_shift(int a1, int a2, int xSrc, int a4, int DestWidth, int DestHeight);
TTextBoxMessage *__thiscall TTextBoxMessage::TTextBoxMessage(TTextBoxMessage *this, char *a2, float a3);
double __thiscall TTextBoxMessage::TimeLeft(TTextBoxMessage *this);
void __thiscall TTextBoxMessage::Refresh(TTextBoxMessage *this, float); // idb
_DWORD *__stdcall score_create(LPCSTR lpString, int a2);
void *__stdcall score_dup(const void *a1, int a2);
void __stdcall objlist_destroy(int a1);
_DWORD *__stdcall score_set(_DWORD *a1, int a2);
// void *__userpurge score_erase@<eax>(int a1@<ebx>, _DWORD *a2, int a3);
// HDC __userpurge score_update@<eax>(int a1@<ebx>, int *a2);
signed int __stdcall score_init();
void __stdcall score_unload_msg_font();
HRSRC __stdcall score_load_msg_font(LPCSTR lpName);
TTextBox *__thiscall TTextBox::TTextBox(TTextBox *this, struct TPinballTable *a2, int a3);
TTextBoxMessage *__thiscall TTextBoxMessage::`scalar deleting destructor'(TTextBoxMessage *this, char a2);
// void __usercall TTextBox::Clear(TTextBox *this@<ecx>, int a2@<ebx>);
// void __userpurge TTextBox::TimerExpired(int a1@<ebx>, int a2, TTextBox *a3);
TZmapList *__thiscall TTextBox::~TTextBox(TTextBox *this);
// void __usercall TTextBox::Draw(TTextBox *this@<ecx>, int a2@<ebx>);
// void __userpurge TTextBox::Display(TTextBox *this@<ecx>, int a2@<ebx>, char *a3, float a4);
TTextBox *__thiscall TTextBox::`scalar deleting destructor'(TTextBox *this, char a2);
void *__stdcall TPinballComponent::operator new(size_t SizeOfElements); // idb
_DWORD __stdcall pb_paint(); // idb
signed int __stdcall pb_mode_change(int a1);
signed int __stdcall pb_mode_countdown(int a1);
int __stdcall pb_end_game();
signed int __stdcall pb_chk_highscore();
long double __stdcall pb_collide(struct TEdgeSegment *a1, float a2, struct TBall *a3);
void __stdcall pb_timed_frame(float, float, int); // idb
// signed int __userpurge pb_frame@<eax>(int a1@<ebx>, int a2);
void __stdcall pb_firsttime_setup();
// struct TPinballTable *__usercall pb_tilt_no_more@<eax>(int a1@<ebx>);
void __stdcall pb_ballset(signed int a1, signed int a2);
void __stdcall nudge(float, float); // idb
void __stdcall un_nudge_left(int, void *); // idb
void __stdcall un_nudge_right(int, void *); // idb
void __stdcall nudge_left(); // idb
void __stdcall nudge_right(); // idb
void __stdcall un_nudge_up(int, void *); // idb
void __stdcall nudge_up(); // idb
void __stdcall pb_keydown(HKEY a1);
void __stdcall pb_keyup(HKEY a1);
int __stdcall pb_replay_level(int a1);
INT_PTR __stdcall pb_high_scores();
_DWORD *__stdcall pb_window_size(_DWORD *a1, _DWORD *a2);
int __stdcall pb_init();
int __stdcall pb_uninit();
int __stdcall pb_loose_focus();
// void __usercall pb_pause_continue(int a1@<ebx>);
int __stdcall pb_launch_ball();
int __stdcall pb_reset_table();
// void __usercall pb_toggle_demo(int a1@<ebx>);
TEdgeSegment *__thiscall TEdgeSegment::TEdgeSegment(TEdgeSegment *this, struct TCollisionComponent *a2, char *a3, unsigned int a4);
_DWORD __stdcall gdrv_get_focus(); // idb
TCircle *__thiscall TCircle::TCircle(TCircle *this, struct TCollisionComponent *a2, char *a3, unsigned int a4, struct vector_type *a5, float a6);
double __thiscall TCircle::FindCollisionDistance(TCircle *this, struct ray_type *a2);
TZmapList *__thiscall TZmapList::TZmapList(TZmapList *this, int a2, int a3);
void __thiscall TBall::not_again(TBall *this, struct TEdgeSegment *); // idb
void __stdcall throw_ball(struct TBall *, struct vector_type *, float, float, float); // idb
int __thiscall TPinballComponent::Message(TPinballComponent *this, int, float); // idb
int __stdcall TPinballComponent::get_scoring(int a2);
void __stdcall TComponentGroup::NotifyTimerExpired(int, struct TPinballComponent *); // idb
int __thiscall TComponentGroup::Message(TComponentGroup *this, int, float); // idb
void __thiscall TCollisionComponent::port_draw(TCollisionComponent *__hidden this); // idb
void __stdcall TWall::TimerExpired(int, void *); // idb
int __thiscall TWall::Message(TWall *this, int, float); // idb
int __thiscall TWall::get_scoring(TWall *this, int); // idb
void __thiscall TWall::put_scoring(TWall *this, int, int); // idb
int __thiscall TOneway::get_scoring(TOneway *this, int); // idb
void __thiscall TOneway::put_scoring(TOneway *this, int, int); // idb
int __thiscall TBall::Message(TBall *this, int, float); // idb
void __thiscall TBall::Repaint(TBall *__hidden this); // idb
void __stdcall TBumper::TimerExpired(int, void *); // idb
void __thiscall TBumper::Fire(TBumper *this); // idb
int __thiscall TBumper::Message(TBumper *this, int, float); // idb
int __thiscall TBumper::get_scoring(TBumper *this, int); // idb
void __thiscall TBumper::put_scoring(TBumper *this, int, int); // idb
void __stdcall TFlagSpinner::SpinTimer(int, void *); // idb
void __thiscall TFlagSpinner::NextFrame(TFlagSpinner *this); // idb
int __thiscall TFlagSpinner::Message(TFlagSpinner *this, int, float); // idb
int __thiscall TFlagSpinner::get_scoring(TFlagSpinner *this, int); // idb
void __thiscall TFlagSpinner::put_scoring(TFlagSpinner *this, int, int); // idb
void __stdcall TPopupTarget::TimerExpired(int, void *); // idb
int __thiscall TPopupTarget::Message(TPopupTarget *this, int, float); // idb
int __thiscall TPopupTarget::get_scoring(TPopupTarget *this, int); // idb
void __thiscall TPopupTarget::put_scoring(TPopupTarget *this, int, int); // idb
void __stdcall TSoloTarget::TimerExpired(int, void *); // idb
int __thiscall TSoloTarget::Message(TSoloTarget *this, int, float); // idb
int __thiscall TSoloTarget::get_scoring(TSoloTarget *this, int); // idb
void __thiscall TSoloTarget::put_scoring(TSoloTarget *this, int, int); // idb
void __stdcall TBlocker::TimerExpired(int, struct TPinballComponent *); // idb
int __thiscall TBlocker::Message(TBlocker *this, int, float); // idb
int __thiscall TGate::Message(TGate *this, int, float); // idb
void __stdcall TRollover::TimerExpired(int, void *); // idb
int __thiscall TRollover::Message(TRollover *this, int, float); // idb
int __thiscall TRollover::get_scoring(TRollover *this, int); // idb
void __thiscall TRollover::put_scoring(TRollover *this, int, int); // idb
void __stdcall TLightRollover::delay_expired(int, void *); // idb
void __thiscall TLightRollover::Collision(TLightRollover *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
int __thiscall TLightRollover::Message(TLightRollover *this, int, float); // idb
void __thiscall TTripwire::Collision(TTripwire *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
void __stdcall TKickback::TimerExpired(int, struct TPinballComponent *); // idb
int __thiscall TKickback::Message(TKickback *this, int, float); // idb
void __thiscall TKickout::Collision(TKickout *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
void __stdcall TKickout::ResetTimerExpired(int, void *); // idb
void __stdcall TKickout::TimerExpired(int, void *); // idb
int __thiscall TKickout::FieldEffect(TKickout *this, struct TBall *, struct vector_type *); // idb
int __thiscall TKickout::Message(TKickout *this, int, float); // idb
int __thiscall TKickout::get_scoring(TKickout *this, int); // idb
void __thiscall TKickout::put_scoring(TKickout *this, int, int); // idb
void __stdcall THole::TimerExpired(int, void *); // idb
int __thiscall THole::FieldEffect(THole *this, struct TBall *, struct vector_type *); // idb
int __thiscall THole::Message(THole *this, int, float); // idb
int __thiscall TRamp::get_scoring(TRamp *this, int); // idb
void __thiscall TRamp::put_scoring(TRamp *this, int, int); // idb
void __stdcall find_closest_edge(struct ramp_plane_type *, int, struct wall_point_type *, struct vector_type **, struct vector_type **); // idb
void __thiscall TRamp::Collision(TRamp *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
int __thiscall TRamp::FieldEffect(TRamp *this, struct TBall *, struct vector_type *); // idb
void __stdcall TDemo::PlungerRelease(int, void *); // idb
void __stdcall TDemo::UnFlipRight(int, void *); // idb
void __stdcall TDemo::UnFlipLeft(int, void *); // idb
void __stdcall TDemo::FlipRight(int, void *); // idb
void __stdcall TDemo::FlipLeft(int, void *); // idb
void __stdcall TDemo::NewGameRestartTimer(int, void *); // idb
void __thiscall TDemo::Collision(TDemo *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
int __thiscall TDemo::Message(TDemo *this, int, float); // idb
void __stdcall TSink::TimerExpired(int, void *); // idb
int __thiscall TSink::Message(TSink *this, int, float); // idb
int __thiscall TSink::get_scoring(TSink *this, int); // idb
void __thiscall TSink::put_scoring(TSink *this, int, int); // idb
int __thiscall TDrain::Message(TDrain *this, int, float); // idb
void __stdcall TDrain::TimerCallback(int, struct TPinballComponent *); // idb
void __stdcall TPlunger::BallFeedTimer(int, void *); // idb
void __stdcall TPlunger::PullbackTimer(int, void *); // idb
void __stdcall TPlunger::PlungerReleasedTimer(int, void *); // idb
int __thiscall TTableLayer::FieldEffect(TTableLayer *this, struct TBall *, struct vector_type *); // idb
TEdgeManager *__thiscall TEdgeManager::`scalar deleting destructor'(TEdgeManager *this, char a2);
void __stdcall TPinballTable::LightShow_timeout(int, void *); // idb
void __stdcall TPinballTable::EndGame_timeout(int, void *); // idb
int __thiscall TPinballTable::AddScore(TPinballTable *this, int); // idb
// void __userpurge TPinballTable::ChangeBallCount(TPinballTable *this@<ecx>, int a2@<ebx>, int a3);
void __stdcall TPinballTable::replay_timer_callback(int, void *); // idb
void __thiscall TPinballTable::port_draw(TPinballTable *__hidden this); // idb
struct TPinballComponent *__thiscall TPinballTable::find_component(TPinballTable *this, char *); // idb
struct TPinballComponent *__thiscall TPinballTable::find_component(TPinballTable *this, int); // idb
void __stdcall TPinballTable::tilt_timeout(int, void *); // idb
// void __userpurge TPinballTable::tilt(TPinballTable *this@<ecx>, int a2@<ebx>, float a3);
double __stdcall basic_collision(struct TBall *a1, struct vector_type *a2, struct vector_type *a3, float a4, float a5, float a6, float a7);
double __thiscall TSound::Play(TSound *this);
void __stdcall TTimer::TimerExpired(int, struct TPinballComponent *); // idb
struct TEdgeSegment *__stdcall install_wall(float *, struct TCollisionComponent *, char *, unsigned int, float, void *); // idb
TPinballComponent *__thiscall TPinballComponent::TPinballComponent(TPinballComponent *this, struct TPinballTable *a2, int a3, int a4);
TZmapList *__thiscall TZmapList::`scalar deleting destructor'(TZmapList *this, char a2);
void __thiscall TCollisionComponent::Collision(TCollisionComponent *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
int __thiscall TCollisionComponent::DefaultCollision(TCollisionComponent *this, struct TBall *, struct vector_type *, struct vector_type *); // idb
void __thiscall TWall::Collision(TWall *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
void __thiscall TOneway::Collision(TOneway *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
void __thiscall TBumper::Collision(TBumper *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
void __thiscall TFlagSpinner::Collision(TFlagSpinner *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
void __thiscall TPopupTarget::Collision(TPopupTarget *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
void __thiscall TSoloTarget::Collision(TSoloTarget *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
void __thiscall TRollover::build_walls(TRollover *this, int); // idb
void __thiscall TRollover::Collision(TRollover *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
void __thiscall TKickback::Collision(TKickback *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
void __thiscall THole::Collision(THole *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
void __thiscall TSink::Collision(TSink *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
void __thiscall TDrain::Collision(TDrain *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
int __thiscall TPlunger::Message(TPlunger *this, int, float); // idb
void __thiscall TPlunger::Collision(TPlunger *this, struct TBall *, struct vector_type *, struct vector_type *, float, struct TEdgeSegment *); // idb
// int __userpurge TPinballTable::Message@<eax>(TPinballTable *this@<ecx>, int a2@<ebx>, int a3, float a4);
int __thiscall TTimer::Message(TTimer *this, int, float); // idb
TZmapList *__thiscall TPinballComponent::~TPinballComponent(TPinballComponent *this);
TComponentGroup *__thiscall TComponentGroup::TComponentGroup(TComponentGroup *this, struct TPinballTable *a2, int a3);
TZmapList *__thiscall TComponentGroup::~TComponentGroup(TComponentGroup *this);
TCollisionComponent *__thiscall TCollisionComponent::TCollisionComponent(TCollisionComponent *this, struct TPinballTable *a2, int a3, int a4);
int __stdcall TTextBox::Message(int a2, float a3);
TZmapList *__thiscall TCollisionComponent::~TCollisionComponent(TCollisionComponent *this);
TWall *__thiscall TWall::TWall(TWall *this, struct TPinballTable *a2, int a3);
TOneway *__thiscall TOneway::TOneway(TOneway *this, struct TPinballTable *a2, int a3);
TBall *__thiscall TBall::TBall(TBall *this, struct TPinballTable *a2);
TBumper *__thiscall TBumper::TBumper(TBumper *this, struct TPinballTable *a2, int a3);
TFlagSpinner *__thiscall TFlagSpinner::TFlagSpinner(TFlagSpinner *this, struct TPinballTable *a2, int a3);
TPopupTarget *__thiscall TPopupTarget::TPopupTarget(TPopupTarget *this, struct TPinballTable *a2, int a3);
TSoloTarget *__thiscall TSoloTarget::TSoloTarget(TSoloTarget *this, struct TPinballTable *a2, int a3);
TBlocker *__thiscall TBlocker::TBlocker(TBlocker *this, struct TPinballTable *a2, int a3);
TGate *__thiscall TGate::TGate(TGate *this, struct TPinballTable *a2, int a3);
TRollover *__thiscall TRollover::TRollover(TRollover *this, struct TPinballTable *a2, int a3, int a4);
TRollover *__thiscall TRollover::TRollover(TRollover *this, struct TPinballTable *a2, int a3);
TLightRollover *__thiscall TLightRollover::TLightRollover(TLightRollover *this, struct TPinballTable *a2, int a3);
TTripwire *__thiscall TTripwire::TTripwire(TTripwire *this, struct TPinballTable *a2, int a3);
TKickback *__thiscall TKickback::TKickback(TKickback *this, struct TPinballTable *a2, int a3);
TKickout *__thiscall TKickout::TKickout(TKickout *this, struct TPinballTable *a2, int a3, struct vector_type *a4);
THole *__thiscall THole::THole(THole *this, struct TPinballTable *a2, int a3);
TRamp *__thiscall TRamp::TRamp(TRamp *this, struct TPinballTable *a2, void *a3);
TDemo *__thiscall TDemo::TDemo(TDemo *this, struct TPinballTable *a2, int a3);
TSink *__thiscall TSink::TSink(TSink *this, struct TPinballTable *a2, int a3);
TDrain *__thiscall TDrain::TDrain(TDrain *this, struct TPinballTable *a2, int a3);
TPlunger *__thiscall TPlunger::TPlunger(TPlunger *this, struct TPinballTable *a2, int a3);
TTableLayer *__thiscall TTableLayer::TTableLayer(TTableLayer *this, struct TPinballTable *a2);
TZmapList *__thiscall TTableLayer::~TTableLayer(TTableLayer *this);
TZmapList *__thiscall TPinballTable::~TPinballTable(TPinballTable *this);
TPinballTable *__thiscall TPinballTable::`vector deleting destructor'(TPinballTable *this, char a2);
TSound *__thiscall TSound::TSound(TSound *this, struct TPinballTable *a2, int a3);
TTimer *__thiscall TTimer::TTimer(TTimer *this, struct TPinballTable *a2, int a3);
TComponentGroup *__thiscall TComponentGroup::`scalar deleting destructor'(TComponentGroup *this, char a2);
TOneway *__thiscall TOneway::`scalar deleting destructor'(TOneway *this, char a2);
TTableLayer *__thiscall TTableLayer::`scalar deleting destructor'(TTableLayer *this, char a2);
TPinballTable *__thiscall TPinballTable::TPinballTable(TPinballTable *this);
void __stdcall vswap(struct vector_type *, struct vector_type *); // idb
void __thiscall TFlipperEdge::place_in_grid(TFlipperEdge *this); // idb
double __thiscall TFlipperEdge::flipper_angle(TFlipperEdge *this, float a2);
void __thiscall TFlipperEdge::build_edges_in_motion(TFlipperEdge *__hidden this); // idb
void __thiscall TFlipperEdge::set_control_points(TFlipperEdge *this, float); // idb
double __stdcall distance_to_flipper(struct ray_type *a1, struct ray_type *a2);
int __thiscall TFlipperEdge::is_ball_inside(TFlipperEdge *this, float, float); // idb
double __thiscall TFlipperEdge::FindCollisionDistance(TFlipperEdge *this, struct ray_type *a2);
void __thiscall TFlipperEdge::EdgeCollision(TFlipperEdge *this, struct TBall *, float); // idb
void __thiscall TFlipperEdge::SetMotion(TFlipperEdge *this, int, float); // idb
void __thiscall TFlipperEdge::port_draw(TFlipperEdge *this); // idb
TZmapList *__thiscall TFlipper::~TFlipper(TFlipper *this);
void __stdcall TFlipper::TimerExpired(int, void *); // idb
int __thiscall TFlipper::Message(TFlipper *this, int, float); // idb
void __thiscall TFlipper::port_draw(TFlipper *__hidden this); // idb
TFlipperEdge *__thiscall TFlipperEdge::TFlipperEdge(TFlipperEdge *this, struct TCollisionComponent *a2, char *a3, unsigned int a4, struct TPinballTable *a5, struct vector_type *a6, struct vector_type *a7, struct vector_type *a8, float a9, float a10, float a11, float a12, float a13);
TFlipper *__thiscall TFlipper::TFlipper(TFlipper *this, struct TPinballTable *a2, int a3);
TFlipper *__thiscall TFlipper::`vector deleting destructor'(TFlipper *this, char a2);
TLine *__thiscall TLine::TLine(TLine *this, struct TCollisionComponent *a2, char *a3, unsigned int a4, float a5, float a6, float a7, float a8);
double __thiscall TLine::FindCollisionDistance(TLine *this, struct ray_type *a2);
TLine *__thiscall TLine::TLine(TLine *this, struct TCollisionComponent *a2, char *a3, unsigned int a4, struct vector_type *a5, struct vector_type *a6);
void __thiscall TLine::EdgeCollision(TLine *this, struct TBall *, float); // idb
void __thiscall TLine::Offset(TLine *this, float); // idb
void __thiscall TLine::place_in_grid(TLine *this); // idb
void __thiscall TCircle::place_in_grid(TCircle *this); // idb
void __stdcall vector_add(struct vector_type *, struct vector_type *); // idb
void __stdcall RotatePt(struct vector_type *, float, float, struct vector_type *); // idb
long double __stdcall Distance(struct vector_type *a1, struct vector_type *a2);
double __stdcall Distance_Squared(float a1, float a2, int a3, float a4, float a5, int a6);
double __stdcall DotProduct(const struct vector_type *a1, const struct vector_type *a2);
void __stdcall SinCos(float, float *, float *); // idb
void __thiscall TCircle::EdgeCollision(TCircle *this, struct TBall *, float); // idb
void __stdcall RotateVector(struct vector_type *, float); // idb
int __security_init_cookie();
// BOOL __usercall __noreturn __report_gsfailure@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4@<ebx>, int a5@<edi>, int a6@<esi>);
int __stdcall sub_101CEB6(LPBYTE lpData); // idb
HWND __stdcall HtmlHelpA(HWND hwndCaller, LPCSTR pszFile, UINT uCommand, DWORD_PTR dwData);
_WORD *__stdcall SessionToGlobalDataPtr(_WORD *a1);
BOOL __stdcall IsValidLPMIXWAVE(int a1);
bool __stdcall HasCurrentOutputFormat(const void *a1);
int __stdcall DefaultPauseBlocks(int a1);
unsigned int __stdcall DefaultGoodWavePos(UINT_PTR uDeviceID);
DWORD __stdcall MyWaveOutGetPosition(HWAVEOUT hwo, int a2);
int __stdcall AddFactor(int a1, int a2);
int __stdcall SubFactor(int a1, int a2);
unsigned int __stdcall SetWaveOutPosition(unsigned int a1);
unsigned int __stdcall MyWaveOutReset(HWAVEOUT hwo);
__int16 __stdcall cmixit(_BYTE *a1, char *a2, char *a3, int a4, unsigned __int16 a5);
_DWORD *__stdcall InitChannelNodes();
int __stdcall GetChannelNode();
_DWORD *__stdcall FreeChannelNode(_DWORD *a1);
struct wavehdr_tag *__stdcall FreeWaveBlocks(HWAVEOUT hwo, int a2);
int __stdcall AllocWaveBlocks(HWAVEOUT hwo, int); // idb
_DWORD *__stdcall SwapWaveBlocks();
_DWORD *__stdcall GetWaveBlock();
struct wavehdr_tag *__stdcall RemoveFromPlayingQueue(struct wavehdr_tag *a1);
LPWAVEHDR __stdcall DestroyPlayQueue();
int __stdcall ReleaseWaveDevice(int a1);
signed int __stdcall GetWaveDevice();
signed int __stdcall WaveMixOpenChannel(_WORD *a1, signed int a2, unsigned int a3);
LPWAVEHDR __stdcall AddToPlayingQueue(struct wavehdr_tag *a1);
int __stdcall MixerPlay(LPWAVEHDR pwh, int); // idb
DWORD __stdcall FreePlayedBlocks();
int __stdcall WaveMixPump();
LRESULT __stdcall WndProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
signed int __stdcall NoResetRemix(int a1, int a2);
signed int __stdcall ResetRemix(int a1, int a2);
void __stdcall ResetWavePosIfNoChannelData();
signed int __stdcall WaveMixPlay(int a1);
signed int __stdcall WaveMixFlushChannel(_WORD *a1, signed int a2, char a3);
signed int __stdcall WaveMixCloseChannel(_WORD *a1, signed int a2, char a3);
int __stdcall WaveMixFreeWave(int, LPCVOID pMem); // idb
// _WORD *__userpurge BitsPerSampleAlign@<eax>(int a1@<eax>, LPCVOID pMem, int a3, __int16 a4, int a5);
_BYTE *__stdcall ChannelAlign(LPCVOID pMem, __int16 a2, __int16 a3, __int16 a4, int a5);
void __stdcall AvgSample(_WORD *a1, unsigned __int8 *a2, int a3, int a4, int a5);
int __stdcall RepSample(_BYTE *a1, unsigned __int8 *a2, signed int a3, int a4, int a5);
LPCVOID __stdcall SamplesPerSecAlign(LPCVOID pMem, int a2, int a3, __int16 a4, __int16 a5, int a6);
LPCVOID __stdcall WaveFormatConvert(int a1, int a2, LPCVOID pMem, int a4);
CHAR *__stdcall WaveMixOpenWave(LPCVOID pMem, LPCSTR lpName, HMODULE hModule, LONG cch);
unsigned int __stdcall FigureOutDMABufferSize(unsigned int a1, int a2);
int __stdcall RemoveInvalidIniNameCharacters(LPCSTR lpString); // idb
UINT __stdcall ShowWaveOutDevices();
const char *__stdcall GetOperatingSystemPrefix();
int __stdcall ReadRegistryToGetMachineSpecificInfSection(int, LPSTR lpString1, int); // idb
int __stdcall ReadRegistryInt(HKEY hKey, LPCSTR lpSubKey, int); // idb
signed int __stdcall ReadRegistryForAppSpecificConfigs(int a1);
int __stdcall ShowCurrentSettings();
int __stdcall Settings_OnInitDialog(HWND hWnd, int, int); // idb
int __stdcall Settings_OnCommand(HWND hWnd, int, int, int); // idb
BOOL __stdcall SettingsDlgProc(HWND, UINT, WPARAM, LPARAM); // idb
_DWORD *__stdcall MakeDlgTemplate(int a1, int a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, wchar_t *Str);
_WORD *__stdcall AddDlgControl(int a1, LPCVOID pMem, __int16 a3, int a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8, __int16 a9, wchar_t *Str);
_WORD *__stdcall MakeSettingsDlgTemplate();
void __stdcall DestroySettingsDlgTemplate(LPCVOID pMem);
signed int __stdcall WaveMixGetConfig(_WORD *a1, int a2);
BOOL __stdcall SaveConfigSettings(__int16 a1);
DWORD __stdcall SetIniFileName(HMODULE hModule);
int __stdcall InitVolumeTable();
int __stdcall WaveMixStartup(HMODULE hModule); // idb
signed int __stdcall WaveMixActivate(_WORD *a1, int a2);
MMRESULT __stdcall WaveMixConfigure(int a1, HWND hWndParent, int a3, int a4, int a5);
signed int __stdcall ReadConfigSettings(int a1);
int __stdcall WaveMixConfigureInit(_WORD *a1);
int __stdcall WaveMixInit();
HLOCAL __stdcall WaveMixCloseSession(HLOCAL hMem);
int WinMainCRTStartup();
// void __cdecl operator delete(void *); idb
// void *__cdecl operator new(unsigned int); idb
// int __cdecl _initterm(_DWORD, _DWORD); weak
unsigned int _setdefaultprecision();
int __stdcall check_expiration_date();
// unsigned int __cdecl _controlfp(unsigned int NewValue, unsigned int Mask);

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN __acmdln; weak
// extern _UNKNOWN __adjust_fdiv; weak
CHAR WindowName[2] = { '\0', '\0' }; // idb
void *TLightBargraph::`vftable' = &TLightBargraph::Message; // weak
void *TLight::`vftable' = &TLight::Message; // weak
void *TLightGroup::`vftable' = &TLightGroup::Message; // weak
void *TTextBox::`vftable' = &TTextBox::Message; // weak
void *TEdgeSegment::`vftable' = &_purecall; // weak
void *TCircle::`vftable' = &TCircle::EdgeCollision; // weak
void *TPinballComponent::`vftable' = &TPinballComponent::Message; // weak
void *TComponentGroup::`vftable' = &TComponentGroup::Message; // weak
void *TCollisionComponent::`vftable' = &TPinballComponent::Message; // weak
void *TWall::`vftable' = &TWall::Message; // weak
void *TOneway::`vftable' = &TPinballComponent::Message; // weak
void *TBall::`vftable' = &TBall::Message; // weak
void *TBumper::`vftable' = &TBumper::Message; // weak
void *TFlagSpinner::`vftable' = &TFlagSpinner::Message; // weak
void *TPopupTarget::`vftable' = &TPopupTarget::Message; // weak
void *TSoloTarget::`vftable' = &TSoloTarget::Message; // weak
void *TBlocker::`vftable' = &TBlocker::Message; // weak
void *TGate::`vftable' = &TGate::Message; // weak
void *TRollover::`vftable' = &TRollover::Message; // weak
void *TLightRollover::`vftable' = &TLightRollover::Message; // weak
void *TTripwire::`vftable' = &TRollover::Message; // weak
void *TKickback::`vftable' = &TKickback::Message; // weak
void *TKickout::`vftable' = &TKickout::Message; // weak
void *THole::`vftable' = &THole::Message; // weak
void *TRamp::`vftable' = &TPinballComponent::Message; // weak
void *TDemo::`vftable' = &TDemo::Message; // weak
void *TSink::`vftable' = &TSink::Message; // weak
void *TDrain::`vftable' = &TDrain::Message; // weak
void *TPlunger::`vftable' = &TPlunger::Message; // weak
void *TTableLayer::`vftable' = &TPinballComponent::Message; // weak
void *TPinballTable::`vftable' = &TPinballTable::Message; // weak
void *TSound::`vftable' = &TPinballComponent::Message; // weak
void *TTimer::`vftable' = &TTimer::Message; // weak
void *TFlipper::`vftable' = &TFlipper::Message; // weak
void *TFlipperEdge::`vftable' = &TFlipperEdge::EdgeCollision; // weak
void *TLine::`vftable' = &TLine::EdgeCollision; // weak
int gpFormat[4] = { 65537, 11025, 11025, 524289 }; // weak
_UNKNOWN __xc_a; // weak
_UNKNOWN __xc_z; // weak
_UNKNOWN __xi_a; // weak
_UNKNOWN __xi_z; // weak
int grtext_red = 4294967295; // weak
int trick = 1; // weak
LOGPALETTE current_palette = { 768u, 256u, { { 0u, 0u, 0u, 0u } } }; // idb
_UNKNOWN unk_102305B; // weak
PALETTEENTRY pPalEntries = { 0u, 0u, 0u, 0u }; // idb
char byte_1023458 = '\0'; // weak
char byte_1023459 = '\0'; // weak
char byte_102345A = '\0'; // weak
_UNKNOWN unk_102345F; // weak
_UNKNOWN unk_1023460; // weak
__int16 vk_list = 32833; // weak
_UNKNOWN unk_1023540; // weak
__int16 field_size[14] =
        {
                2,
                65535,
                2,
                65535,
                65535,
                65535,
                65535,
                65535,
                65535,
                65535,
                65535,
                65535,
                65535,
                0
        }; // idb
int LeftShift = 4294967295; // weak
int RightShift = 4294967295; // weak
int dword_10235F4 = 1; // weak
int loader_errors[] = { 0 }; // weak
char *off_10235FC[54] =
        {
                "Bad Handle",
                (char *)1,
                "No Type Field",
                (char *)2,
                "No Attributes Field",
                (char *)0xB,
                "No float Attributes Field",
                (char *)3,
                "Wrong Type: MATERIAL Expected",
                (char *)4,
                "Wrong Type: KICKER Expected",
                (char *)5,
                "Wrong Type: AN_OBJECT Expected",
                (char *)6,
                "Wrong Type: A_STATE Expected",
                (char *)7,
                "STATES (re)defined in a state",
                (char *)9,
                "Unrecognized Attribute",
                (char *)0xA,
                "Unrecognized float Attribute",
                (char *)0xD,
                "float Attribute not found",
                (char *)0xC,
                "state_index out of range",
                (char *)0xF,
                "loader_material() reports failure",
                (char *)0xE,
                "loader_kicker() reports failure",
                (char *)0x10,
                "loader_state_id() reports failure",
                (char *)8,
                "# walls doesn't match data size",
                (char *)0x11,
                "loader_query_visual_states()",
                (char *)0x12,
                "loader_query_visual()",
                (char *)0x15,
                "loader_material()",
                (char *)0x14,
                "loader_kicker()",
                (char *)0x16,
                "loader_query_attribute()",
                (char *)0x17,
                "loader_query_iattribute()",
                (char *)0x13,
                "loader_query_name()",
                (char *)0x18,
                "loader_state_id()",
                (char *)0x19,
                "loader_get_sound_id()",
                (char *)0x1A,
                "sound reference is not A_SOUND record",
                (char *)0xFFFFFFFF
        }; // idb
int sound_count = 1; // weak
int dword_10236E4 = 0; // weak
int dword_10236EC = 0; // weak
int dword_10236F4 = 0; // weak
int dword_10236FC = 0; // weak
int dword_1023704 = 0; // weak
int dword_102370C = 0; // weak
int dword_1023714 = 0; // weak
int dword_102371C = 0; // weak
int dword_1023724 = 0; // weak
int dword_102372C = 0; // weak
int dword_1023734 = 0; // weak
int dword_102373C = 0; // weak
int dword_1023758 = 0; // weak
int dword_1023770 = 0; // weak
int dword_1023778 = 0; // weak
int dword_1023780 = 0; // weak
int dword_1023788 = 0; // weak
int dword_1023790 = 0; // weak
int dword_1023798 = 0; // weak
int dword_10237A0 = 0; // weak
int dword_10237A8 = 0; // weak
int dword_10237C4 = 0; // weak
int dword_10237CC = 0; // weak
int dword_10237D4 = 0; // weak
int dword_10237DC = 0; // weak
int dword_10237E8 = 0; // weak
int dword_10237F0 = 0; // weak
int dword_1023808 = 0; // weak
int dword_1023810 = 0; // weak
char *off_1023814 = "lite30"; // weak
int dword_1023818 = 0; // weak
char *off_102381C = "lite29"; // weak
int dword_1023820 = 0; // weak
int dword_1023828 = 0; // weak
int dword_1023830 = 0; // weak
int dword_1023838 = 0; // weak
int dword_1023840 = 0; // weak
struct TPinballComponent *dword_1023860 = NULL; // idb
int dword_1023868 = 0; // weak
int dword_1023870 = 0; // weak
char *off_1023874 = "lite54"; // weak
int dword_1023878 = 0; // weak
char *off_102387C = "lite55"; // weak
int dword_1023880 = 0; // weak
char *off_1023884 = "lite56"; // weak
int dword_1023888 = 0; // weak
int dword_102389C = 0; // weak
int dword_10238A4 = 0; // weak
char *off_10238A8 = "lite17"; // weak
int dword_10238AC = 0; // weak
char *off_10238B0 = "lite18"; // weak
int dword_10238B4 = 0; // weak
int dword_10238C0 = 0; // weak
int dword_10238C8 = 0; // weak
char *off_10238CC = "lite27"; // weak
int dword_10238D0 = 0; // weak
char *off_10238D4 = "lite28"; // weak
int dword_10238D8 = 0; // weak
int dword_10238E8 = 0; // weak
char *off_10238EC = "lite16"; // weak
int dword_10238F0 = 0; // weak
int dword_1023924 = 0; // weak
int dword_1023930 = 0; // weak
char *off_102393C = "lite20"; // weak
int dword_1023940 = 0; // weak
int dword_1023948 = 0; // weak
int dword_1023950 = 0; // weak
int dword_1023958 = 0; // weak
int dword_1023960 = 0; // weak
int dword_1023968 = 0; // weak
int dword_1023970 = 0; // weak
int dword_1023978 = 0; // weak
int dword_1023980 = 0; // weak
struct TPinballComponent *dword_10239A8 = NULL; // idb
char *off_10239AC = "lite25"; // weak
int dword_10239B0 = 0; // weak
char *off_10239B4 = "lite26"; // weak
int dword_10239B8 = 0; // weak
char *off_10239BC = "lite130"; // weak
int dword_10239C0 = 0; // weak
int dword_10239C8 = 0; // weak
int dword_10239D0 = 0; // weak
int dword_10239EC = 0; // weak
int dword_10239F4 = 0; // weak
int dword_10239FC = 0; // weak
int dword_1023A04 = 0; // weak
int dword_1023A0C = 0; // weak
int dword_1023A14 = 0; // weak
int dword_1023A1C = 0; // weak
char *off_1023A20 = "lite4"; // weak
int dword_1023A24 = 0; // weak
int dword_1023A2C = 0; // weak
int dword_1023A34 = 0; // weak
int dword_1023A3C = 0; // weak
char **off_1023A40[9] =
        {
                &off_10239E8,
                &off_10239F0,
                &off_10239F8,
                &off_1023A00,
                &off_1023A08,
                &off_1023A10,
                &off_1023A20,
                &off_1023A28,
                &off_1023A30
        }; // weak
char **off_1023A4C[6] =
        {
                &off_1023A00,
                &off_1023A08,
                &off_1023A10,
                &off_1023A20,
                &off_1023A28,
                &off_1023A30
        }; // weak
char **off_1023A58[3] = { &off_1023A20, &off_1023A28, &off_1023A30 }; // weak
int dword_1023A74 = 0; // weak
int dword_1023A7C = 0; // weak
int dword_1023A84 = 0; // weak
int dword_1023A8C = 0; // weak
int dword_1023A94 = 0; // weak
int dword_1023A9C = 0; // weak
int dword_1023AA4 = 0; // weak
int dword_1023AAC = 0; // weak
char *off_1023AB0 = "lite61"; // weak
int dword_1023AB4 = 0; // weak
char *off_1023AB8 = "lite60"; // weak
int dword_1023ABC = 0; // weak
char *off_1023AC0 = "lite59"; // weak
int dword_1023AC4 = 0; // weak
char *off_1023AC8 = "lite58"; // weak
int dword_1023ACC = 0; // weak
int dword_1023ADC = 0; // weak
int dword_1023AE4 = 0; // weak
int dword_1023AEC = 0; // weak
struct TPinballComponent *dword_1023B0C = NULL; // idb
int dword_1023B20 = 0; // weak
int dword_1023B28 = 0; // weak
int dword_1023B30 = 0; // weak
struct TPinballComponent *dword_1023B38 = NULL; // idb
int dword_1023B48 = 0; // weak
int dword_1023B50 = 0; // weak
int dword_1023B58 = 0; // weak
int dword_1023B60 = 0; // weak
int dword_1023B68 = 0; // weak
int dword_1023B70 = 0; // weak
int dword_1023B78 = 0; // weak
int dword_1023B84 = 0; // weak
int dword_1023B8C = 0; // weak
int dword_1023B94 = 0; // weak
int dword_1023B9C = 0; // weak
int dword_1023BA4 = 0; // weak
int dword_1023BAC = 0; // weak
int dword_1023BB4 = 0; // weak
char *off_1023BB8 = "lite198"; // weak
int dword_1023BBC = 0; // weak
int dword_1023BC8 = 0; // weak
int dword_1023BD0 = 0; // weak
int dword_1023BD8 = 0; // weak
int dword_1023BE0 = 0; // weak
int dword_1023BE8 = 0; // weak
int dword_1023BF0 = 0; // weak
int dword_1023BF8 = 0; // weak
int dword_1023C00 = 0; // weak
int dword_1023C08 = 0; // weak
int dword_1023C10 = 0; // weak
int dword_1023C18 = 0; // weak
int dword_1023C20 = 0; // weak
int dword_1023C28 = 0; // weak
int dword_1023C30 = 0; // weak
int dword_1023C3C = 0; // weak
char *off_1023C40 = "lite110"; // weak
int dword_1023C44 = 0; // weak
int dword_1023C50 = 0; // weak
int dword_1023C5C = 0; // weak
int dword_1023C68 = 0; // weak
int dword_1023C70 = 0; // weak
int dword_1023C7C = 0; // weak
char *off_1023CB0 = "lite67"; // weak
int dword_1023CB4 = 0; // weak
int dword_1023CBC = 0; // weak
int dword_1023CC4 = 0; // weak
int dword_1023CCC = 0; // weak
int dword_1023CD4 = 0; // weak
int dword_1023CDC = 0; // weak
int dword_1023CE4 = 0; // weak
int dword_1023CEC = 0; // weak
int dword_1023CF4 = 0; // weak
int dword_1023CFC = 0; // weak
char *off_1023D00 = "lite200"; // weak
int dword_1023D04 = 0; // weak
char *off_1023D08 = "lite199"; // weak
int dword_1023D0C = 0; // weak
int dword_1023D14 = 0; // weak
int dword_1023D1C = 0; // weak
int dword_1023D24 = 0; // weak
int dword_1023D2C = 0; // weak
int dword_1023D34 = 0; // weak
int dword_1023D3C = 0; // weak
int dword_1023D44 = 0; // weak
int dword_1023D4C = 0; // weak
int dword_1023D54 = 0; // weak
int dword_1023D64 = 0; // weak
int dword_1023D6C = 0; // weak
int dword_1023D74 = 0; // weak
int dword_1023D7C = 0; // weak
int dword_1023D84 = 0; // weak
int dword_1023D8C = 0; // weak
int dword_1023D94 = 0; // weak
int dword_1023D9C = 0; // weak
int dword_1023DA4 = 0; // weak
int dword_1023DAC = 0; // weak
int dword_1023DB4 = 0; // weak
int dword_1023DBC = 0; // weak
int dword_1023DC4 = 0; // weak
int dword_1023DCC = 0; // weak
int dword_1023DD4 = 0; // weak
int dword_1023DDC = 0; // weak
int dword_1023DE4 = 0; // weak
int dword_1023DEC = 0; // weak
int dword_1023DF4 = 0; // weak
int dword_1023DFC = 0; // weak
int dword_1023E04 = 0; // weak
int dword_1023E0C = 0; // weak
int dword_1023E14 = 0; // weak
TTextBox *dword_1023E1C = NULL; // idb
TTextBox *dword_1023E24 = NULL; // idb
int dword_1023E34 = 0; // weak
int dword_1023E3C = 0; // weak
int dword_1023E44 = 0; // weak
char *off_1023E48 = "lite303"; // weak
int dword_1023E4C = 0; // weak
char *off_1023E50 = "lite304"; // weak
int dword_1023E54 = 0; // weak
int dword_1023E5C = 0; // weak
int dword_1023E64 = 0; // weak
int dword_1023E6C = 0; // weak
int dword_1023E74 = 0; // weak
int dword_1023E7C = 0; // weak
int dword_1023E84 = 0; // weak
int dword_1023E8C = 0; // weak
int dword_1023E94 = 0; // weak
int dword_1023E9C = 0; // weak
char *off_1023EA0 = "lite314"; // weak
int dword_1023EA4 = 0; // weak
int dword_1023EAC = 0; // weak
char *off_1023EB0 = "lite316"; // weak
int dword_1023EB4 = 0; // weak
char *off_1023EB8 = "lite317"; // weak
int dword_1023EBC = 0; // weak
char *off_1023EC0 = "lite318"; // weak
int dword_1023EC4 = 0; // weak
char *off_1023EC8 = "lite319"; // weak
int dword_1023ECC = 0; // weak
int dword_1023ED4 = 0; // weak
int dword_1023EDC = 0; // weak
int dword_1023EE4 = 0; // weak
int dword_1023EEC = 0; // weak
_UNKNOWN unk_1023EF8; // weak
char **off_1024470[142] =
        {
                &off_1023708,
                &off_1023710,
                &off_1023718,
                &off_1023720,
                &off_1023774,
                &off_102377C,
                &off_1023784,
                &off_102378C,
                &off_1023814,
                &off_102381C,
                &off_1023864,
                &off_1023874,
                &off_102387C,
                &off_1023884,
                &off_10238B0,
                &off_10238CC,
                &off_10238D4,
                &off_10238EC,
                &off_1023984,
                &off_102398C,
                &off_1023994,
                &off_102399C,
                &off_10239AC,
                &off_10239B4,
                &off_10239BC,
                &off_1023A00,
                &off_1023A08,
                &off_1023A10,
                &off_1023A18,
                &off_1023A20,
                &off_1023A28,
                &off_1023A30,
                &off_1023A38,
                &off_1023A88,
                &off_1023A90,
                &off_1023944,
                &off_102394C,
                &off_1023954,
                &off_102395C,
                &off_1023964,
                &off_102396C,
                &off_1023974,
                &off_102393C,
                &off_10239CC,
                &off_1023AB0,
                &off_1023AC8,
                &off_1023AF0,
                &off_1023AF8,
                &off_1023B00,
                &off_1023B5C,
                &off_1023B64,
                &off_1023B6C,
                &off_1023B74,
                &off_1023B98,
                &off_1023BA0,
                &off_1023BA8,
                &off_1023BB0,
                &off_1023BF4,
                &off_1023BFC,
                &off_1023C04,
                &off_1023C0C,
                &off_1023C14,
                &off_1023C1C,
                &off_1023C24,
                &off_1023C2C,
                &off_1023C40,
                &off_1023C6C,
                &off_1023CB0,
                &off_1023CB8,
                &off_1023CC0,
                &off_1023CC8,
                &off_1023CD0,
                &off_1023CD8,
                &off_1023CE0,
                &off_1023CE8,
                &off_1023BB8,
                &off_1023CF0,
                &off_1023CF8,
                &off_1023D10,
                &off_1023D18,
                &off_1023D20,
                &off_1023D28,
                &off_1023D30,
                &off_1023D38,
                &off_1023D40,
                &off_1023D48,
                &off_1023D58,
                &off_1023D60,
                &off_1023D68,
                &off_1023D70,
                &off_1023D78,
                &off_1023D80,
                &off_1023D88,
                &off_1023D90,
                &off_1023D98,
                &off_1023DA0,
                &off_1023DA8,
                &off_1023DB0,
                &off_1023DB8,
                &off_1023DC0,
                &off_1023DC8,
                &off_1023DD0,
                &off_1023DD8,
                &off_1023DE0,
                &off_1023D08,
                &off_1023824,
                &off_102382C,
                &off_1023E18,
                &off_1023E20,
                &off_1023DE8,
                &off_10237D0,
                &off_10237D8,
                &off_1023DF0,
                &off_1023DF8,
                &off_1023E00,
                &off_1023E08,
                &off_1023E30,
                &off_1023E38,
                &off_1023E40,
                &off_1023E48,
                &off_1023E50,
                &off_1023E58,
                &off_1023E60,
                &off_1023E68,
                &off_1023E70,
                &off_1023E78,
                &off_1023E80,
                &off_1023E88,
                &off_1023E90,
                &off_1023E98,
                &off_1023EA0,
                &off_1023EA8,
                &off_1023EB0,
                &off_1023EB8,
                &off_1023EC0,
                &off_1023EC8,
                &off_1023ED0,
                &off_1023ED8,
                &off_1023EE0,
                &off_1023EE8,
                &off_1023D50,
                &off_1023E10
        }; // weak
int off_10246A0 = 16923984; // idb
__int16 word_10246EC[] = { 84 }; // weak
__int16 word_1024708[] = { 91 }; // weak
int render_blit = 1; // weak
int dword_1024758[5] = { 1, 2, 3, 5, 10 }; // idb
int __security_cookie_complement = 4294919359; // weak
int __security_cookie = 47936; // weak
CHAR aWavemixV23ByAn[] = "WaveMix V 2.3 by Angel M. Diaz, Jr. (c) Microsoft 1993-1995"; // idb
int __defaultmatherr = 1; // weak
LPCSTR lpString2 = NULL; // idb
LPSTR lpString1 = NULL; // idb
CHAR byte_10248A8[1536] =
        {
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',
                '\0',

        }; // idb
int rc_string_slot; // weak
struct tagRECT Rect; // idb
HWND hWnd; // idb
int dword_1024EC0; // weak
struct tagRECT X; // idb
int dword_1024ED4; // weak
int dword_1024ED8; // weak
int dword_1024EDC; // weak
int dword_1024EE0; // weak
int fullscrn_screen_mode; // weak
int dword_1024EE8; // weak
int dword_1024EEC; // weak
int dword_1024EF0; // weak
int fullscrn_display_changed; // weak
int dword_1024EF8; // weak
int gdrv_use_wing; // weak
int memory_use_total; // weak
int memory_critical_allocation; // weak
int (*memory_critical_callback)(void); // weak
HMENU hMenu; // idb
__int16 word_1024F18; // weak
int dword_1024F1C[8]; // idb
int dword_1024F3C[8]; // idb
LPCVOID pMem; // idb
HMODULE dword_1024F60; // idb
HWND dword_1024F64; // idb
int (__stdcall *dword_1024F68)(_DWORD, _DWORD, _DWORD); // weak
HINSTANCE hInstance; // idb
int dword_1024F70; // weak
int dword_1024F74; // weak
int dword_1024F78; // weak
int dword_1024F7C; // weak
int dword_1024F80; // weak
int time_ticks; // weak
char Dest[80]; // idb
int single_step; // weak
int bQuit; // weak
int DispFrameRate; // weak
int DispGRhistory; // weak
int mouse_down; // weak
int has_focus; // weak
int activated; // weak
int no_time_loss; // weak
int cheat_mode; // weak
int midi_seq1_open; // weak
int midi_seq1_playing; // weak
HWND midi_notify_hwnd; // weak
_UNKNOWN mci_open_info; // weak
MCIDEVICEID mciId; // idb
int dword_1025014; // weak
int dword_1025018; // weak
CHAR byte_1025020[28]; // idb
TEdgeManager *edge_manager; // idb
TPinballTable *dword_1025040; // idb
int dword_1025044; // weak
int dword_1025048; // weak
int dword_102504C; // weak
int dword_1025050; // weak
_UNKNOWN zscreen; // weak
__int16 word_102505A; // weak
struct render_sprite_type_struct **render_dirty_list; // weak
struct render_sprite_type_struct **render_ball_list; // weak
int render_many_balls; // weak
_UNKNOWN vscreen_rect; // weak
int dword_1025078; // weak
int dword_102507C; // weak
int dword_1025080; // weak
struct render_sprite_type_struct **render_sprite_list; // weak
_UNKNOWN vscreen; // weak
int dword_1025094; // weak
int dword_1025098; // weak
int xDest; // idb
int yDest; // idb
float render_zscaler; // weak
int render_many_sprites; // weak
float render_zmax; // weak
float render_zmin; // weak
int render_many_dirty; // weak
_UNKNOWN ball_bitmap; // weak
int render_offset_x; // weak
int render_offset_y; // weak
int render_background_bitmap; // idb
struct zmap_header_type *render_background_zmap; // weak
_UNKNOWN render_zmap_offset; // weak
int dword_10253C0; // weak
struct score_msg_font_type *score_msg_fontp; // weak
float ball_speed_limit; // weak
_UNKNOWN pb_state; // weak
CHAR byte_102543C[300]; // idb
int dword_1025568; // weak
int dword_102556C; // weak
int dword_1025570; // weak
int dword_1025574; // weak
CHAR byte_1025578[32]; // idb
int dword_1025598[36]; // idb
float time_now; // weak
float time_next; // weak
int pb_record_table; // idb
int nudged_left; // weak
int nudged_right; // weak
int nudged_up; // weak
int nudge_timer; // weak
float nudge_count; // weak
TTextBox *InfoTextBox; // idb
TTextBox *MissTextBox; // idb
struct TPinballTable *MainTable; // idb
float flipper_sin_angle; // idb
_UNKNOWN circlebase; // weak
int dword_1025664; // weak
int dword_102566C; // weak
_UNKNOWN circleT1; // weak
int dword_1025674; // weak
int dword_102567C; // weak
_UNKNOWN lineA; // weak
float flt_1025684; // weak
_UNKNOWN unk_10256A4; // weak
float flipper_cos_angle; // idb
_UNKNOWN A2; // weak
float flt_10256B8; // weak
_UNKNOWN lineB; // weak
float flt_10256C4; // weak
_UNKNOWN unk_10256E4; // weak
_UNKNOWN B1; // weak
float flt_10256F4; // weak
_UNKNOWN B2; // weak
float flt_1025700; // weak
_UNKNOWN T1; // weak
int dword_102570C; // weak
_UNKNOWN A1; // weak
float flt_1025718; // weak
HWND (__stdcall *pHtmlHelpA)(HWND, const char *, unsigned int, unsigned int); // weak
int dword_1025728; // weak
HMODULE hModule; // idb
int dword_1025730[16]; // idb
_UNKNOWN unk_1025770; // weak
int dword_1025798; // weak
int dword_10257A0[16]; // idb
HINSTANCE dword_10257E0; // idb
_UNKNOWN unk_10257E4; // weak
__int16 word_1025810[]; // weak
__int16 word_1025812[30]; // idb
CHAR FileName[276]; // idb
int dword_1025964; // weak
int dword_1025968; // weak
char byte_1025970[128]; // idb
_UNKNOWN unk_10259F0; // weak
_UNKNOWN unk_10263F0; // weak
_UNKNOWN unk_1026470; // weak
_UNKNOWN unk_1027B68; // weak
int dword_1027BA4; // weak
LPARAM hMem; // idb
int dword_1027BE4; // weak
int dword_1027BE8; // weak
LPWAVEHDR pwh; // idb
int dword_1027BF0; // weak
int dword_1027BF4; // weak
int dword_1027BF8; // weak
int _dowildcard; // weak
int _newmode; // weak
int _commode; // weak
int _fmode;
int loader_table; // idb
int sound_record_table; // weak
int sound_list[]; // weak
int dword_1027C24[]; // weak
int dword_1027C28[]; // weak
char algn_1027C2C[4]; // weak
int dword_1027C30[]; // weak
_UNKNOWN unk_1027C34; // weak
int loader_sound_count; // weak
int proj_centery; // weak
int proj_centerx; // weak
int proj_d; // weak
_UNKNOWN proj_matrix; // weak
_UNKNOWN unk_1028170; // weak
float flt_1028190; // weak
float flt_1028194; // weak
float flt_1028198; // weak
float flt_102819C; // weak
int then; // weak
_UNKNOWN gfr_display; // weak
int dword_10281C8; // weak
UINT iFrostUniqueMsg; // idb
int last_mouse_y; // idb
int now; // weak
HCURSOR mouse_hsave; // idb
int last_mouse_x; // idb
HWND hwnd_frame; // idb
int return_value; // weak
HINSTANCE hinst; // idb
int num_channels; // weak
HKEY options; // idb
HKEY phkResult; // idb
HKEY dword_1028228; // idb
HKEY dword_102822C; // idb
HKEY dword_1028230; // idb
HKEY dword_1028234; // idb
HKEY dword_1028238; // idb
HKEY dword_102823C; // idb
HKEY dword_1028240; // idb
HKEY dword_1028244; // idb
HKEY dword_1028248; // idb
HKEY dword_102824C; // idb
__int16 dword_1028250; // idb
__int16 dword_1028254; // idb
__int16 dword_1028258; // idb
__int16 dword_102825C; // idb
__int16 dword_1028260; // idb
__int16 dword_1028264; // idb
int high_score_dlg_score; // idb
LPCSTR high_score_dlg_hst; // idb
int high_score_dlg_enter_name; // weak
int high_score_position; // idb
LPCSTR high_score_default_name; // idb
HGDIOBJ gdrv_palette_handle; // idb
HDC gdrv_sequence_hdc; // idb
int gdrv_hinst; // weak
HWND gdrv_hwnd; // idb
int gdrv_sequence_handle; // weak
int grtext_blue; // weak
int grtext_green; // weak
int __onexitend; // weak
int __onexitbegin; // weak
int _adjust_fdiv; // weak

#endif //PINBALL_PINBALL_H
